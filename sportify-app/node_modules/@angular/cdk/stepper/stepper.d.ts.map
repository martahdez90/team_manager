{"version":3,"file":"stepper.d.ts","sources":["stepper.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusableOption } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput, NumberInput } from '@angular/cdk/coercion';\r\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnChanges, OnDestroy, QueryList, TemplateRef } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { CdkStepLabel } from './step-label';\r\n/**\r\n * Position state of the content of each step in stepper that is used for transitioning\r\n * the content into correct position upon step selection change.\r\n */\r\nexport declare type StepContentPositionState = 'previous' | 'current' | 'next';\r\n/** Possible orientation of a stepper. */\r\nexport declare type StepperOrientation = 'horizontal' | 'vertical';\r\n/** Change event emitted on selection changes. */\r\nexport declare class StepperSelectionEvent {\r\n    /** Index of the step now selected. */\r\n    selectedIndex: number;\r\n    /** Index of the step previously selected. */\r\n    previouslySelectedIndex: number;\r\n    /** The step instance now selected. */\r\n    selectedStep: CdkStep;\r\n    /** The step instance previously selected. */\r\n    previouslySelectedStep: CdkStep;\r\n}\r\n/** The state of each step. */\r\nexport declare type StepState = 'number' | 'edit' | 'done' | 'error' | string;\r\n/** Enum to represent the different states of the steps. */\r\nexport declare const STEP_STATE: {\r\n    NUMBER: string;\r\n    EDIT: string;\r\n    DONE: string;\r\n    ERROR: string;\r\n};\r\n/** InjectionToken that can be used to specify the global stepper options. */\r\nexport declare const STEPPER_GLOBAL_OPTIONS: InjectionToken<StepperOptions>;\r\n/**\r\n * InjectionToken that can be used to specify the global stepper options.\r\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\r\n * @breaking-change 8.0.0.\r\n */\r\nexport declare const MAT_STEPPER_GLOBAL_OPTIONS: InjectionToken<StepperOptions>;\r\n/** Configurable options for stepper. */\r\nexport interface StepperOptions {\r\n    /**\r\n     * Whether the stepper should display an error state or not.\r\n     * Default behavior is assumed to be false.\r\n     */\r\n    showError?: boolean;\r\n    /**\r\n     * Whether the stepper should display the default indicator type\r\n     * or not.\r\n     * Default behavior is assumed to be true.\r\n     */\r\n    displayDefaultIndicatorType?: boolean;\r\n}\r\nexport declare class CdkStep implements OnChanges {\r\n    private _stepper;\r\n    private _stepperOptions;\r\n    _showError: boolean;\r\n    _displayDefaultIndicatorType: boolean;\r\n    /** Template for step label if it exists. */\r\n    stepLabel: CdkStepLabel;\r\n    /** Template for step content. */\r\n    content: TemplateRef<any>;\r\n    /** The top level abstract control of the step. */\r\n    stepControl: AbstractControlLike;\r\n    /** Whether user has seen the expanded step content or not. */\r\n    interacted: boolean;\r\n    /** Plain text label of the step. */\r\n    label: string;\r\n    /** Error message to display when there's an error. */\r\n    errorMessage: string;\r\n    /** Aria label for the tab. */\r\n    ariaLabel: string;\r\n    /**\r\n     * Reference to the element that the tab is labelled by.\r\n     * Will be cleared if `aria-label` is set at the same time.\r\n     */\r\n    ariaLabelledby: string;\r\n    /** State of the step. */\r\n    state: StepState;\r\n    /** Whether the user can return to this step once it has been marked as completed. */\r\n    get editable(): boolean;\r\n    set editable(value: boolean);\r\n    private _editable;\r\n    /** Whether the completion of step is optional. */\r\n    get optional(): boolean;\r\n    set optional(value: boolean);\r\n    private _optional;\r\n    /** Whether step is marked as completed. */\r\n    get completed(): boolean;\r\n    set completed(value: boolean);\r\n    _completedOverride: boolean | null;\r\n    private _getDefaultCompleted;\r\n    /** Whether step has an error. */\r\n    get hasError(): boolean;\r\n    set hasError(value: boolean);\r\n    private _customError;\r\n    private _getDefaultError;\r\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\r\n    constructor(_stepper: CdkStepper, stepperOptions?: StepperOptions);\r\n    /** Selects this step component. */\r\n    select(): void;\r\n    /** Resets the step to its initial state. Note that this includes resetting form data. */\r\n    reset(): void;\r\n    ngOnChanges(): void;\r\n    static ngAcceptInputType_editable: BooleanInput;\r\n    static ngAcceptInputType_hasError: BooleanInput;\r\n    static ngAcceptInputType_optional: BooleanInput;\r\n    static ngAcceptInputType_completed: BooleanInput;\r\n}\r\nexport declare class CdkStepper implements AfterViewInit, OnDestroy {\r\n    private _dir;\r\n    private _changeDetectorRef;\r\n    private _elementRef?;\r\n    /** Emits when the component is destroyed. */\r\n    protected _destroyed: Subject<void>;\r\n    /** Used for managing keyboard focus. */\r\n    private _keyManager;\r\n    /**\r\n     * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\r\n     * constructor param is required.\r\n     */\r\n    private _document;\r\n    /**\r\n     * The list of step components that the stepper is holding.\r\n     * @deprecated use `steps` instead\r\n     * @breaking-change 9.0.0 remove this property\r\n     */\r\n    _steps: QueryList<CdkStep>;\r\n    /** The list of step components that the stepper is holding. */\r\n    get steps(): QueryList<CdkStep>;\r\n    /**\r\n     * The list of step headers of the steps in the stepper.\r\n     * @deprecated Type to be changed to `QueryList<CdkStepHeader>`.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    _stepHeader: QueryList<FocusableOption>;\r\n    /** Whether the validity of previous steps should be checked or not. */\r\n    get linear(): boolean;\r\n    set linear(value: boolean);\r\n    private _linear;\r\n    /** The index of the selected step. */\r\n    get selectedIndex(): number;\r\n    set selectedIndex(index: number);\r\n    private _selectedIndex;\r\n    /** The step that is selected. */\r\n    get selected(): CdkStep;\r\n    set selected(step: CdkStep);\r\n    /** Event emitted when the selected step has changed. */\r\n    selectionChange: EventEmitter<StepperSelectionEvent>;\r\n    /** Used to track unique ID for each stepper component. */\r\n    _groupId: number;\r\n    protected _orientation: StepperOrientation;\r\n    constructor(_dir: Directionality, _changeDetectorRef: ChangeDetectorRef, _elementRef?: ElementRef<HTMLElement> | undefined, _document?: any);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Selects and focuses the next step in list. */\r\n    next(): void;\r\n    /** Selects and focuses the previous step in list. */\r\n    previous(): void;\r\n    /** Resets the stepper to its initial state. Note that this includes clearing form data. */\r\n    reset(): void;\r\n    /** Returns a unique id for each step label element. */\r\n    _getStepLabelId(i: number): string;\r\n    /** Returns unique id for each step content element. */\r\n    _getStepContentId(i: number): string;\r\n    /** Marks the component to be change detected. */\r\n    _stateChanged(): void;\r\n    /** Returns position state of the step with the given index. */\r\n    _getAnimationDirection(index: number): StepContentPositionState;\r\n    /** Returns the type of icon to be displayed. */\r\n    _getIndicatorType(index: number, state?: StepState): StepState;\r\n    private _getDefaultIndicatorLogic;\r\n    private _getGuidelineLogic;\r\n    private _isCurrentStep;\r\n    /** Returns the index of the currently-focused step header. */\r\n    _getFocusIndex(): number | null;\r\n    private _updateSelectedItemIndex;\r\n    _onKeydown(event: KeyboardEvent): void;\r\n    private _anyControlsInvalidOrPending;\r\n    private _layoutDirection;\r\n    /** Checks whether the stepper contains the focused element. */\r\n    private _containsFocus;\r\n    static ngAcceptInputType_editable: BooleanInput;\r\n    static ngAcceptInputType_optional: BooleanInput;\r\n    static ngAcceptInputType_completed: BooleanInput;\r\n    static ngAcceptInputType_hasError: BooleanInput;\r\n    static ngAcceptInputType_linear: BooleanInput;\r\n    static ngAcceptInputType_selectedIndex: NumberInput;\r\n}\r\n/**\r\n * Simplified representation of an \"AbstractControl\" from @angular/forms.\r\n * Used to avoid having to bring in @angular/forms for a single optional interface.\r\n * @docs-private\r\n */\r\ninterface AbstractControlLike {\r\n    asyncValidator: ((control: any) => any) | null;\r\n    dirty: boolean;\r\n    disabled: boolean;\r\n    enabled: boolean;\r\n    errors: {\r\n        [key: string]: any;\r\n    } | null;\r\n    invalid: boolean;\r\n    parent: any;\r\n    pending: boolean;\r\n    pristine: boolean;\r\n    root: AbstractControlLike;\r\n    status: string;\r\n    statusChanges: Observable<any>;\r\n    touched: boolean;\r\n    untouched: boolean;\r\n    updateOn: any;\r\n    valid: boolean;\r\n    validator: ((control: any) => any) | null;\r\n    value: any;\r\n    valueChanges: Observable<any>;\r\n    clearAsyncValidators(): void;\r\n    clearValidators(): void;\r\n    disable(opts?: any): void;\r\n    enable(opts?: any): void;\r\n    get(path: (string | number)[] | string): AbstractControlLike | null;\r\n    getError(errorCode: string, path?: (string | number)[] | string): any;\r\n    hasError(errorCode: string, path?: (string | number)[] | string): boolean;\r\n    markAllAsTouched(): void;\r\n    markAsDirty(opts?: any): void;\r\n    markAsPending(opts?: any): void;\r\n    markAsPristine(opts?: any): void;\r\n    markAsTouched(opts?: any): void;\r\n    markAsUntouched(opts?: any): void;\r\n    patchValue(value: any, options?: Object): void;\r\n    reset(value?: any, options?: Object): void;\r\n    setAsyncValidators(newValidator: (control: any) => any | ((control: any) => any)[] | null): void;\r\n    setErrors(errors: {\r\n        [key: string]: any;\r\n    } | null, opts?: any): void;\r\n    setParent(parent: any): void;\r\n    setValidators(newValidator: (control: any) => any | ((control: any) => any)[] | null): void;\r\n    setValue(value: any, options?: Object): void;\r\n    updateValueAndValidity(opts?: any): void;\r\n    patchValue(value: any, options?: any): void;\r\n    reset(formState?: any, options?: any): void;\r\n    setValue(value: any, options?: any): void;\r\n}\r\nexport {};\r\n"]}