{"version":3,"file":"accordion.d.ts","sources":["accordion.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n/**\r\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\r\n */\r\nexport declare class CdkAccordion implements OnDestroy, OnChanges {\r\n    /** Emits when the state of the accordion changes */\r\n    readonly _stateChanges: Subject<SimpleChanges>;\r\n    /** Stream that emits true/false when openAll/closeAll is triggered. */\r\n    readonly _openCloseAllActions: Subject<boolean>;\r\n    /** A readonly id value to use for unique selection coordination. */\r\n    readonly id: string;\r\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\r\n    get multi(): boolean;\r\n    set multi(multi: boolean);\r\n    private _multi;\r\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\r\n    openAll(): void;\r\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\r\n    closeAll(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private _openCloseAll;\r\n    static ngAcceptInputType_multi: BooleanInput;\r\n}\r\n"]}