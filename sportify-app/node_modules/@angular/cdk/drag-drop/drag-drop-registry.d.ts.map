{"version":3,"file":"drag-drop-registry.d.ts","sources":["drag-drop-registry.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { NgZone, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\nexport declare class DragDropRegistry<I, C> implements OnDestroy {\r\n    private _ngZone;\r\n    private _document;\r\n    /** Registered drop container instances. */\r\n    private _dropInstances;\r\n    /** Registered drag item instances. */\r\n    private _dragInstances;\r\n    /** Drag item instances that are currently being dragged. */\r\n    private _activeDragInstances;\r\n    /** Keeps track of the event listeners that we've bound to the `document`. */\r\n    private _globalListeners;\r\n    /**\r\n     * Emits the `touchmove` or `mousemove` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     */\r\n    readonly pointerMove: Subject<TouchEvent | MouseEvent>;\r\n    /**\r\n     * Emits the `touchend` or `mouseup` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     */\r\n    readonly pointerUp: Subject<TouchEvent | MouseEvent>;\r\n    /** Emits when the viewport has been scrolled while the user is dragging an item. */\r\n    readonly scroll: Subject<Event>;\r\n    constructor(_ngZone: NgZone, _document: any);\r\n    /** Adds a drop container to the registry. */\r\n    registerDropContainer(drop: C): void;\r\n    /** Adds a drag item instance to the registry. */\r\n    registerDragItem(drag: I): void;\r\n    /** Removes a drop container from the registry. */\r\n    removeDropContainer(drop: C): void;\r\n    /** Removes a drag item instance from the registry. */\r\n    removeDragItem(drag: I): void;\r\n    /**\r\n     * Starts the dragging sequence for a drag instance.\r\n     * @param drag Drag instance which is being dragged.\r\n     * @param event Event that initiated the dragging.\r\n     */\r\n    startDragging(drag: I, event: TouchEvent | MouseEvent): void;\r\n    /** Stops dragging a drag item instance. */\r\n    stopDragging(drag: I): void;\r\n    /** Gets whether a drag item instance is currently being dragged. */\r\n    isDragging(drag: I): boolean;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Event listener that will prevent the default browser action while the user is dragging.\r\n     * @param event Event whose default action should be prevented.\r\n     */\r\n    private _preventDefaultWhileDragging;\r\n    /** Clears out the global event listeners from the `document`. */\r\n    private _clearGlobalListeners;\r\n}\r\n"]}