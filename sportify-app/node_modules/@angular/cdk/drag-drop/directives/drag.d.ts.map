{"version":3,"file":"drag.d.ts","sources":["drag.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, QueryList, ViewContainerRef, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { Observable } from 'rxjs';\r\nimport { CdkDragDrop, CdkDragEnd, CdkDragEnter, CdkDragExit, CdkDragMove, CdkDragStart, CdkDragRelease } from '../drag-events';\r\nimport { CdkDragHandle } from './drag-handle';\r\nimport { CdkDragPlaceholder } from './drag-placeholder';\r\nimport { CdkDragPreview } from './drag-preview';\r\nimport { DragRef, Point } from '../drag-ref';\r\nimport { CdkDropListInternal as CdkDropList } from './drop-list';\r\nimport { DragDrop } from '../drag-drop';\r\nimport { DragDropConfig, DragStartDelay, DragAxis } from './config';\r\n/**\r\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n */\r\nexport declare const CDK_DROP_LIST: InjectionToken<CdkDropList>;\r\n/** Element that can be moved inside a CdkDropList container. */\r\nexport declare class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\r\n    /** Element that the draggable is attached to. */\r\n    element: ElementRef<HTMLElement>;\r\n    /** Droppable container that the draggable is a part of. */\r\n    dropContainer: CdkDropList;\r\n    private _document;\r\n    private _ngZone;\r\n    private _viewContainerRef;\r\n    private _dir;\r\n    private _changeDetectorRef;\r\n    private _destroyed;\r\n    /** Reference to the underlying drag instance. */\r\n    _dragRef: DragRef<CdkDrag<T>>;\r\n    /** Elements that can be used to drag the draggable item. */\r\n    _handles: QueryList<CdkDragHandle>;\r\n    /** Element that will be used as a template to create the draggable item's preview. */\r\n    _previewTemplate: CdkDragPreview;\r\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n    _placeholderTemplate: CdkDragPlaceholder;\r\n    /** Arbitrary data to attach to this drag instance. */\r\n    data: T;\r\n    /** Locks the position of the dragged element along the specified axis. */\r\n    lockAxis: DragAxis;\r\n    /**\r\n     * Selector that will be used to determine the root draggable element, starting from\r\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\r\n     * when trying to enable dragging on an element that you might not have access to.\r\n     */\r\n    rootElementSelector: string;\r\n    /**\r\n     * Node or selector that will be used to determine the element to which the draggable's\r\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\r\n     * will be matched starting from the element's parent and going up the DOM until a match\r\n     * has been found.\r\n     */\r\n    boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\r\n    /**\r\n     * Amount of milliseconds to wait after the user has put their\r\n     * pointer down before starting to drag the element.\r\n     */\r\n    dragStartDelay: DragStartDelay;\r\n    /**\r\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\r\n     * Can be used to restore the element's position for a returning user.\r\n     */\r\n    freeDragPosition: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    /** Whether starting to drag this element is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /**\r\n     * Function that can be used to customize the logic of how the position of the drag item\r\n     * is limited while it's being dragged. Gets called with a point containing the current position\r\n     * of the user's pointer on the page and should return a point describing where the item should\r\n     * be rendered.\r\n     */\r\n    constrainPosition?: (point: Point, dragRef: DragRef) => Point;\r\n    /** Class to be added to the preview element. */\r\n    previewClass: string | string[];\r\n    /** Emits when the user starts dragging the item. */\r\n    started: EventEmitter<CdkDragStart>;\r\n    /** Emits when the user has released a drag item, before any animations have started. */\r\n    released: EventEmitter<CdkDragRelease>;\r\n    /** Emits when the user stops dragging an item in the container. */\r\n    ended: EventEmitter<CdkDragEnd>;\r\n    /** Emits when the user has moved the item into a new container. */\r\n    entered: EventEmitter<CdkDragEnter<any>>;\r\n    /** Emits when the user removes the item its container by dragging it into another container. */\r\n    exited: EventEmitter<CdkDragExit<any>>;\r\n    /** Emits when the user drops the item inside a container. */\r\n    dropped: EventEmitter<CdkDragDrop<any>>;\r\n    /**\r\n     * Emits as the user is dragging the item. Use with caution,\r\n     * because this event will fire for every pixel that the user has dragged.\r\n     */\r\n    moved: Observable<CdkDragMove<T>>;\r\n    constructor(\r\n    /** Element that the draggable is attached to. */\r\n    element: ElementRef<HTMLElement>, \r\n    /** Droppable container that the draggable is a part of. */\r\n    dropContainer: CdkDropList, _document: any, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, config: DragDropConfig, _dir: Directionality, dragDrop: DragDrop, _changeDetectorRef: ChangeDetectorRef);\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     */\r\n    getPlaceholderElement(): HTMLElement;\r\n    /** Returns the root draggable element. */\r\n    getRootElement(): HTMLElement;\r\n    /** Resets a standalone drag item to its initial position. */\r\n    reset(): void;\r\n    /**\r\n     * Gets the pixel coordinates of the draggable outside of a drop container.\r\n     */\r\n    getFreeDragPosition(): {\r\n        readonly x: number;\r\n        readonly y: number;\r\n    };\r\n    ngAfterViewInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** Syncs the root element with the `DragRef`. */\r\n    private _updateRootElement;\r\n    /** Gets the boundary element, based on the `boundaryElement` value. */\r\n    private _getBoundaryElement;\r\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\r\n    private _syncInputs;\r\n    /** Handles the events from the underlying `DragRef`. */\r\n    private _handleEvents;\r\n    /** Assigns the default input values based on a provided config object. */\r\n    private _assignDefaults;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n"]}