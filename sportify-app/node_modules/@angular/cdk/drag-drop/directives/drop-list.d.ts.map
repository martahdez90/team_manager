{"version":3,"file":"drop-list.d.ts","sources":["drop-list.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, EventEmitter, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\r\nimport { CdkDrag } from './drag';\r\nimport { CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent } from '../drag-events';\r\nimport { CdkDropListGroup } from './drop-list-group';\r\nimport { DropListRef } from '../drop-list-ref';\r\nimport { DragDrop } from '../drag-drop';\r\nimport { DropListOrientation, DragAxis, DragDropConfig } from './config';\r\n/**\r\n * Internal compile-time-only representation of a `CdkDropList`.\r\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\r\n * @docs-private\r\n */\r\nexport interface CdkDropListInternal extends CdkDropList {\r\n}\r\n/** Container that wraps a set of draggable items. */\r\nexport declare class CdkDropList<T = any> implements OnDestroy {\r\n    /** Element that the drop list is attached to. */\r\n    element: ElementRef<HTMLElement>;\r\n    private _changeDetectorRef;\r\n    private _dir?;\r\n    private _group?;\r\n    /**\r\n     * @deprecated _scrollDispatcher parameter to become required.\r\n     * @breaking-change 11.0.0\r\n     */\r\n    private _scrollDispatcher?;\r\n    /** Emits when the list has been destroyed. */\r\n    private _destroyed;\r\n    /** Whether the element's scrollable parents have been resolved. */\r\n    private _scrollableParentsResolved;\r\n    /** Keeps track of the drop lists that are currently on the page. */\r\n    private static _dropLists;\r\n    /** Reference to the underlying drop list instance. */\r\n    _dropListRef: DropListRef<CdkDropList<T>>;\r\n    /**\r\n     * Other draggable containers that this container is connected to and into which the\r\n     * container's items can be transferred. Can either be references to other drop containers,\r\n     * or their unique IDs.\r\n     */\r\n    connectedTo: (CdkDropList | string)[] | CdkDropList | string;\r\n    /** Arbitrary data to attach to this container. */\r\n    data: T;\r\n    /** Direction in which the list is oriented. */\r\n    orientation: DropListOrientation;\r\n    /**\r\n     * Unique ID for the drop zone. Can be used as a reference\r\n     * in the `connectedTo` of another `CdkDropList`.\r\n     */\r\n    id: string;\r\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n    lockAxis: DragAxis;\r\n    /** Whether starting a dragging sequence from this container is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Whether sorting within this drop list is disabled. */\r\n    sortingDisabled: boolean;\r\n    /**\r\n     * Function that is used to determine whether an item\r\n     * is allowed to be moved into a drop container.\r\n     */\r\n    enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean;\r\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\r\n    autoScrollDisabled: boolean;\r\n    /** Emits when the user drops an item inside the container. */\r\n    dropped: EventEmitter<CdkDragDrop<T, any>>;\r\n    /**\r\n     * Emits when the user has moved a new drag item into this container.\r\n     */\r\n    entered: EventEmitter<CdkDragEnter<T>>;\r\n    /**\r\n     * Emits when the user removes an item from the container\r\n     * by dragging it into another container.\r\n     */\r\n    exited: EventEmitter<CdkDragExit<T>>;\r\n    /** Emits as the user is swapping items while actively dragging. */\r\n    sorted: EventEmitter<CdkDragSortEvent<T>>;\r\n    /**\r\n     * Keeps track of the items that are registered with this container. Historically we used to\r\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\r\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\r\n     * correctly. What we do instead is to have the items register themselves with the container\r\n     * and then we sort them based on their position in the DOM.\r\n     */\r\n    private _unsortedItems;\r\n    constructor(\r\n    /** Element that the drop list is attached to. */\r\n    element: ElementRef<HTMLElement>, dragDrop: DragDrop, _changeDetectorRef: ChangeDetectorRef, _dir?: Directionality | undefined, _group?: CdkDropListGroup<CdkDropList<any>> | undefined, \r\n    /**\r\n     * @deprecated _scrollDispatcher parameter to become required.\r\n     * @breaking-change 11.0.0\r\n     */\r\n    _scrollDispatcher?: ScrollDispatcher | undefined, config?: DragDropConfig);\r\n    /** Registers an items with the drop list. */\r\n    addItem(item: CdkDrag): void;\r\n    /** Removes an item from the drop list. */\r\n    removeItem(item: CdkDrag): void;\r\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\r\n    getSortedItems(): CdkDrag[];\r\n    ngOnDestroy(): void;\r\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n    private _setupInputSyncSubscription;\r\n    /** Handles events from the underlying DropListRef. */\r\n    private _handleEvents;\r\n    /** Assigns the default input values based on a provided config object. */\r\n    private _assignDefaults;\r\n    /** Syncs up the registered drag items with underlying drop list ref. */\r\n    private _syncItemsWithRef;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_sortingDisabled: BooleanInput;\r\n    static ngAcceptInputType_autoScrollDisabled: BooleanInput;\r\n}\r\n"]}