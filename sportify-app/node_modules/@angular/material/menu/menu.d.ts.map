{"version":3,"file":"menu.d.ts","sources":["menu.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusOrigin } from '@angular/cdk/a11y';\r\nimport { Direction } from '@angular/cdk/bidi';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, TemplateRef, QueryList, OnInit } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { MatMenuContent } from './menu-content';\r\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\r\nimport { MatMenuItem } from './menu-item';\r\nimport { MatMenuPanel } from './menu-panel';\r\nimport { AnimationEvent } from '@angular/animations';\r\n/** Default `mat-menu` options that can be overridden. */\r\nexport interface MatMenuDefaultOptions {\r\n    /** The x-axis position of the menu. */\r\n    xPosition: MenuPositionX;\r\n    /** The y-axis position of the menu. */\r\n    yPosition: MenuPositionY;\r\n    /** Whether the menu should overlap the menu trigger. */\r\n    overlapTrigger: boolean;\r\n    /** Class to be applied to the menu's backdrop. */\r\n    backdropClass: string;\r\n    /** Whether the menu has a backdrop. */\r\n    hasBackdrop?: boolean;\r\n}\r\n/** Injection token to be used to override the default options for `mat-menu`. */\r\nexport declare const MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;\r\n/** @docs-private */\r\nexport declare function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions;\r\n/** Base class with all of the `MatMenu` functionality. */\r\nexport declare class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\r\n    private _elementRef;\r\n    private _ngZone;\r\n    private _defaultOptions;\r\n    private _keyManager;\r\n    private _xPosition;\r\n    private _yPosition;\r\n    private _previousElevation;\r\n    /** All items inside the menu. Includes items nested inside another menu. */\r\n    _allItems: QueryList<MatMenuItem>;\r\n    /** Only the direct descendant menu items. */\r\n    private _directDescendantItems;\r\n    /** Subscription to tab events on the menu panel */\r\n    private _tabSubscription;\r\n    /** Config object to be passed into the menu's ngClass */\r\n    _classList: {\r\n        [key: string]: boolean;\r\n    };\r\n    /** Current state of the panel animation. */\r\n    _panelAnimationState: 'void' | 'enter';\r\n    /** Emits whenever an animation on the menu completes. */\r\n    _animationDone: Subject<AnimationEvent>;\r\n    /** Whether the menu is animating. */\r\n    _isAnimating: boolean;\r\n    /** Parent menu of the current menu panel. */\r\n    parentMenu: MatMenuPanel | undefined;\r\n    /** Layout direction of the menu. */\r\n    direction: Direction;\r\n    /** Class to be added to the backdrop element. */\r\n    backdropClass: string;\r\n    /** aria-label for the menu panel. */\r\n    ariaLabel: string;\r\n    /** aria-labelledby for the menu panel. */\r\n    ariaLabelledby: string;\r\n    /** aria-describedby for the menu panel. */\r\n    ariaDescribedby: string;\r\n    /** Position of the menu in the X axis. */\r\n    get xPosition(): MenuPositionX;\r\n    set xPosition(value: MenuPositionX);\r\n    /** Position of the menu in the Y axis. */\r\n    get yPosition(): MenuPositionY;\r\n    set yPosition(value: MenuPositionY);\r\n    /** @docs-private */\r\n    templateRef: TemplateRef<any>;\r\n    /**\r\n     * List of the items inside of a menu.\r\n     * @deprecated\r\n     * @breaking-change 8.0.0\r\n     */\r\n    items: QueryList<MatMenuItem>;\r\n    /**\r\n     * Menu content that will be rendered lazily.\r\n     * @docs-private\r\n     */\r\n    lazyContent: MatMenuContent;\r\n    /** Whether the menu should overlap its trigger. */\r\n    get overlapTrigger(): boolean;\r\n    set overlapTrigger(value: boolean);\r\n    private _overlapTrigger;\r\n    /** Whether the menu has a backdrop. */\r\n    get hasBackdrop(): boolean | undefined;\r\n    set hasBackdrop(value: boolean | undefined);\r\n    private _hasBackdrop;\r\n    /**\r\n     * This method takes classes set on the host mat-menu element and applies them on the\r\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n     * to style the containing menu from outside the component.\r\n     * @param classes list of class names\r\n     */\r\n    set panelClass(classes: string);\r\n    private _previousPanelClass;\r\n    /**\r\n     * This method takes classes set on the host mat-menu element and applies them on the\r\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n     * to style the containing menu from outside the component.\r\n     * @deprecated Use `panelClass` instead.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    get classList(): string;\r\n    set classList(classes: string);\r\n    /** Event emitted when the menu is closed. */\r\n    readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\r\n    /**\r\n     * Event emitted when the menu is closed.\r\n     * @deprecated Switch to `closed` instead\r\n     * @breaking-change 8.0.0\r\n     */\r\n    close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\r\n    readonly panelId: string;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _defaultOptions: MatMenuDefaultOptions);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Stream that emits whenever the hovered menu item changes. */\r\n    _hovered(): Observable<MatMenuItem>;\r\n    addItem(_item: MatMenuItem): void;\r\n    /**\r\n     * Removes an item from the menu.\r\n     * @docs-private\r\n     * @deprecated No longer being used. To be removed.\r\n     * @breaking-change 9.0.0\r\n     */\r\n    removeItem(_item: MatMenuItem): void;\r\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    /**\r\n     * Focus the first item in the menu.\r\n     * @param origin Action from which the focus originated. Used to set the correct styling.\r\n     */\r\n    focusFirstItem(origin?: FocusOrigin): void;\r\n    /**\r\n     * Actual implementation that focuses the first item. Needs to be separated\r\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\r\n     */\r\n    private _focusFirstItem;\r\n    /**\r\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\r\n     * the user to start from the first option when pressing the down arrow.\r\n     */\r\n    resetActiveItem(): void;\r\n    /**\r\n     * Sets the menu panel elevation.\r\n     * @param depth Number of parent menus that come before the menu.\r\n     */\r\n    setElevation(depth: number): void;\r\n    /**\r\n     * Adds classes to the menu panel based on its position. Can be used by\r\n     * consumers to add specific styling based on the position.\r\n     * @param posX Position of the menu along the x axis.\r\n     * @param posY Position of the menu along the y axis.\r\n     * @docs-private\r\n     */\r\n    setPositionClasses(posX?: MenuPositionX, posY?: MenuPositionY): void;\r\n    /** Starts the enter animation. */\r\n    _startAnimation(): void;\r\n    /** Resets the panel animation to its initial state. */\r\n    _resetAnimation(): void;\r\n    /** Callback that is invoked when the panel animation completes. */\r\n    _onAnimationDone(event: AnimationEvent): void;\r\n    _onAnimationStart(event: AnimationEvent): void;\r\n    /**\r\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\r\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\r\n     * items that are part of child menus, and using a custom way of registering items is unreliable\r\n     * when it comes to maintaining the item order.\r\n     */\r\n    private _updateDirectDescendants;\r\n    static ngAcceptInputType_overlapTrigger: BooleanInput;\r\n    static ngAcceptInputType_hasBackdrop: BooleanInput;\r\n}\r\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\r\nexport declare class MatMenu extends _MatMenuBase {\r\n}\r\n/** @docs-public MatMenu */\r\nexport declare class _MatMenu extends MatMenu {\r\n    constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone, defaultOptions: MatMenuDefaultOptions);\r\n}\r\n"]}