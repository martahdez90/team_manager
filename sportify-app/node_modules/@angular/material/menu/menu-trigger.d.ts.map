{"version":3,"file":"menu-trigger.d.ts","sources":["menu-trigger.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatMenu } from './menu';\r\nimport { MatMenuItem } from './menu-item';\r\nimport { MatMenuPanel } from './menu-panel';\r\n/** Injection token that determines the scroll handling while the menu is open. */\r\nexport declare const MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\r\n/** @docs-private */\r\nexport declare function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\r\n/** @docs-private */\r\nexport declare const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {\r\n    provide: InjectionToken<() => ScrollStrategy>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof MAT_MENU_SCROLL_STRATEGY_FACTORY;\r\n};\r\n/** Default top padding of the menu panel. */\r\nexport declare const MENU_PANEL_TOP_PADDING = 8;\r\n/** Directive applied to an element that should trigger a `mat-menu`. */\r\nexport declare class MatMenuTrigger implements AfterContentInit, OnDestroy {\r\n    private _overlay;\r\n    private _element;\r\n    private _viewContainerRef;\r\n    private _parentMenu;\r\n    private _menuItemInstance;\r\n    private _dir;\r\n    private _focusMonitor?;\r\n    private _portal;\r\n    private _overlayRef;\r\n    private _menuOpen;\r\n    private _closingActionsSubscription;\r\n    private _hoverSubscription;\r\n    private _menuCloseSubscription;\r\n    private _scrollStrategy;\r\n    /**\r\n     * Handles touch start events on the trigger.\r\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\r\n     */\r\n    private _handleTouchStart;\r\n    _openedBy: 'mouse' | 'touch' | null;\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0\r\n     */\r\n    get _deprecatedMatMenuTriggerFor(): MatMenuPanel;\r\n    set _deprecatedMatMenuTriggerFor(v: MatMenuPanel);\r\n    /** References the menu instance that the trigger is associated with. */\r\n    get menu(): MatMenuPanel;\r\n    set menu(menu: MatMenuPanel);\r\n    private _menu;\r\n    /** Data to be passed along to any lazily-rendered content. */\r\n    menuData: any;\r\n    /**\r\n     * Whether focus should be restored when the menu is closed.\r\n     * Note that disabling this option can have accessibility implications\r\n     * and it's up to you to manage focus, if you decide to turn it off.\r\n     */\r\n    restoreFocus: boolean;\r\n    /** Event emitted when the associated menu is opened. */\r\n    readonly menuOpened: EventEmitter<void>;\r\n    /**\r\n     * Event emitted when the associated menu is opened.\r\n     * @deprecated Switch to `menuOpened` instead\r\n     * @breaking-change 8.0.0\r\n     */\r\n    readonly onMenuOpen: EventEmitter<void>;\r\n    /** Event emitted when the associated menu is closed. */\r\n    readonly menuClosed: EventEmitter<void>;\r\n    /**\r\n     * Event emitted when the associated menu is closed.\r\n     * @deprecated Switch to `menuClosed` instead\r\n     * @breaking-change 8.0.0\r\n     */\r\n    readonly onMenuClose: EventEmitter<void>;\r\n    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _parentMenu: MatMenu, _menuItemInstance: MatMenuItem, _dir: Directionality, _focusMonitor?: FocusMonitor | undefined);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Whether the menu is open. */\r\n    get menuOpen(): boolean;\r\n    /** The text direction of the containing app. */\r\n    get dir(): Direction;\r\n    /** Whether the menu triggers a sub-menu or a top-level one. */\r\n    triggersSubmenu(): boolean;\r\n    /** Toggles the menu between the open and closed states. */\r\n    toggleMenu(): void;\r\n    /** Opens the menu. */\r\n    openMenu(): void;\r\n    /** Closes the menu. */\r\n    closeMenu(): void;\r\n    /**\r\n     * Focuses the menu trigger.\r\n     * @param origin Source of the menu trigger's focus.\r\n     */\r\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\r\n    /** Closes the menu and does the necessary cleanup. */\r\n    private _destroyMenu;\r\n    /**\r\n     * This method sets the menu state to open and focuses the first item if\r\n     * the menu was opened via the keyboard.\r\n     */\r\n    private _initMenu;\r\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\r\n    private _setMenuElevation;\r\n    /** Restores focus to the element that was focused before the menu was open. */\r\n    private _restoreFocus;\r\n    private _setIsMenuOpen;\r\n    /**\r\n     * This method checks that a valid instance of MatMenu has been passed into\r\n     * matMenuTriggerFor. If not, an exception is thrown.\r\n     */\r\n    private _checkMenu;\r\n    /**\r\n     * This method creates the overlay from the provided menu's template and saves its\r\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\r\n     */\r\n    private _createOverlay;\r\n    /**\r\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\r\n     * @returns OverlayConfig\r\n     */\r\n    private _getOverlayConfig;\r\n    /**\r\n     * Listens to changes in the position of the overlay and sets the correct classes\r\n     * on the menu based on the new position. This ensures the animation origin is always\r\n     * correct, even if a fallback position is used for the overlay.\r\n     */\r\n    private _subscribeToPositions;\r\n    /**\r\n     * Sets the appropriate positions on a position strategy\r\n     * so the overlay connects with the trigger correctly.\r\n     * @param positionStrategy Strategy whose position to update.\r\n     */\r\n    private _setPosition;\r\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\r\n    private _menuClosingActions;\r\n    /** Handles mouse presses on the trigger. */\r\n    _handleMousedown(event: MouseEvent): void;\r\n    /** Handles key presses on the trigger. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    /** Handles click events on the trigger. */\r\n    _handleClick(event: MouseEvent): void;\r\n    /** Handles the cases where the user hovers over the trigger. */\r\n    private _handleHover;\r\n    /** Gets the portal that should be attached to the overlay. */\r\n    private _getPortal;\r\n}\r\n"]}