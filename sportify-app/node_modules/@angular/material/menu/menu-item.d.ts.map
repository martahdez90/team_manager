{"version":3,"file":"menu-item.d.ts","sources":["menu-item.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatMenuPanel } from './menu-panel';\r\n/** @docs-private */\r\ndeclare class MatMenuItemBase {\r\n}\r\ndeclare const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase;\r\n/**\r\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\r\n */\r\nexport declare class MatMenuItem extends _MatMenuItemMixinBase implements FocusableOption, CanDisable, CanDisableRipple, AfterViewInit, OnDestroy {\r\n    private _elementRef;\r\n    private _focusMonitor?;\r\n    _parentMenu?: MatMenuPanel<MatMenuItem> | undefined;\r\n    /** ARIA role for the menu item. */\r\n    role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox';\r\n    private _document;\r\n    /** Stream that emits when the menu item is hovered. */\r\n    readonly _hovered: Subject<MatMenuItem>;\r\n    /** Stream that emits when the menu item is focused. */\r\n    readonly _focused: Subject<MatMenuItem>;\r\n    /** Whether the menu item is highlighted. */\r\n    _highlighted: boolean;\r\n    /** Whether the menu item acts as a trigger for a sub-menu. */\r\n    _triggersSubmenu: boolean;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined);\r\n    /** Focuses the menu item. */\r\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Used to set the `tabindex`. */\r\n    _getTabIndex(): string;\r\n    /** Returns the host DOM element. */\r\n    _getHostElement(): HTMLElement;\r\n    /** Prevents the default element actions if it is disabled. */\r\n    _checkDisabled(event: Event): void;\r\n    /** Emits to the hover stream. */\r\n    _handleMouseEnter(): void;\r\n    /** Gets the label to be used when determining whether the option should be focused. */\r\n    getLabel(): string;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\nexport {};\r\n"]}