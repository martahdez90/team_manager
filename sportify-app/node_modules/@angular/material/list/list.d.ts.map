{"version":3,"file":"list.d.ts","sources":["list.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentInit, ElementRef, QueryList, OnChanges, OnDestroy, ChangeDetectorRef, InjectionToken } from '@angular/core';\r\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\n/** @docs-private */\r\ndeclare class MatListBase {\r\n}\r\ndeclare const _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase;\r\n/** @docs-private */\r\ndeclare class MatListItemBase {\r\n}\r\ndeclare const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase;\r\n/**\r\n * Injection token that can be used to inject instances of `MatList`. It serves as\r\n * alternative token to the actual `MatList` class which could cause unnecessary\r\n * retention of the class and its component metadata.\r\n */\r\nexport declare const MAT_LIST: InjectionToken<MatList>;\r\n/**\r\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\r\n * alternative token to the actual `MatNavList` class which could cause unnecessary\r\n * retention of the class and its component metadata.\r\n */\r\nexport declare const MAT_NAV_LIST: InjectionToken<MatNavList>;\r\nexport declare class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges, OnDestroy {\r\n    /** Emits when the state of the list changes. */\r\n    _stateChanges: Subject<void>;\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\nexport declare class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges, OnDestroy {\r\n    private _elementRef;\r\n    /** Emits when the state of the list changes. */\r\n    _stateChanges: Subject<void>;\r\n    constructor(_elementRef: ElementRef<HTMLElement>);\r\n    _getListType(): 'list' | 'action-list' | null;\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\nexport declare class MatListAvatarCssMatStyler {\r\n}\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\nexport declare class MatListIconCssMatStyler {\r\n}\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\nexport declare class MatListSubheaderCssMatStyler {\r\n}\r\n/** An item within a Material Design list. */\r\nexport declare class MatListItem extends _MatListItemMixinBase implements AfterContentInit, CanDisableRipple, OnDestroy {\r\n    private _element;\r\n    private _isInteractiveList;\r\n    private _list?;\r\n    private _destroyed;\r\n    _lines: QueryList<MatLine>;\r\n    _avatar: MatListAvatarCssMatStyler;\r\n    _icon: MatListIconCssMatStyler;\r\n    constructor(_element: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, navList?: MatNavList, list?: MatList);\r\n    /** Whether the option is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Whether this list item should show a ripple effect when clicked. */\r\n    _isRippleDisabled(): boolean;\r\n    /** Retrieves the DOM element of the component host. */\r\n    _getHostElement(): HTMLElement;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\nexport {};\r\n"]}