{"version":3,"file":"selection-list.d.ts","sources":["selection-list.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusableOption, FocusKeyManager } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine, ThemePalette } from '@angular/material/core';\r\nimport { MatListAvatarCssMatStyler, MatListIconCssMatStyler } from './list';\r\ndeclare class MatSelectionListBase {\r\n}\r\ndeclare const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase;\r\ndeclare class MatListOptionBase {\r\n}\r\ndeclare const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase;\r\n/** @docs-private */\r\nexport declare const MAT_SELECTION_LIST_VALUE_ACCESSOR: any;\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport declare class MatSelectionListChange {\r\n    /** Reference to the selection list that emitted the event. */\r\n    source: MatSelectionList;\r\n    /** Reference to the option that has been changed. */\r\n    option: MatListOption;\r\n    constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    source: MatSelectionList, \r\n    /** Reference to the option that has been changed. */\r\n    option: MatListOption);\r\n}\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\nexport declare class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\r\n    private _element;\r\n    private _changeDetector;\r\n    /** @docs-private */\r\n    selectionList: MatSelectionList;\r\n    private _selected;\r\n    private _disabled;\r\n    private _hasFocus;\r\n    _avatar: MatListAvatarCssMatStyler;\r\n    _icon: MatListIconCssMatStyler;\r\n    _lines: QueryList<MatLine>;\r\n    /** DOM element containing the item's text. */\r\n    _text: ElementRef;\r\n    /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\r\n    checkboxPosition: 'before' | 'after';\r\n    /** Theme color of the list option. This sets the color of the checkbox. */\r\n    get color(): ThemePalette;\r\n    set color(newValue: ThemePalette);\r\n    private _color;\r\n    /**\r\n     * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\r\n     * in the first cycle.\r\n     */\r\n    private _inputsInitialized;\r\n    /** Value of the option */\r\n    get value(): any;\r\n    set value(newValue: any);\r\n    private _value;\r\n    /** Whether the option is disabled. */\r\n    get disabled(): any;\r\n    set disabled(value: any);\r\n    /** Whether the option is selected. */\r\n    get selected(): boolean;\r\n    set selected(value: boolean);\r\n    constructor(_element: ElementRef<HTMLElement>, _changeDetector: ChangeDetectorRef, \r\n    /** @docs-private */\r\n    selectionList: MatSelectionList);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Toggles the selection state of the option. */\r\n    toggle(): void;\r\n    /** Allows for programmatic focusing of the option. */\r\n    focus(): void;\r\n    /**\r\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n     * @docs-private\r\n     */\r\n    getLabel(): any;\r\n    /** Whether this list item should show a ripple effect when clicked. */\r\n    _isRippleDisabled(): any;\r\n    _handleClick(): void;\r\n    _handleFocus(): void;\r\n    _handleBlur(): void;\r\n    /** Retrieves the DOM element of the component host. */\r\n    _getHostElement(): HTMLElement;\r\n    /** Sets the selected state of the option. Returns whether the value has changed. */\r\n    _setSelected(selected: boolean): boolean;\r\n    /**\r\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\r\n     * used to trigger an update of the list option if the disabled state of the selection list\r\n     * changed.\r\n     */\r\n    _markForCheck(): void;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_selected: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\nexport declare class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\r\n    private _element;\r\n    private _changeDetector;\r\n    private _multiple;\r\n    private _contentInitialized;\r\n    /** The FocusKeyManager which handles focus. */\r\n    _keyManager: FocusKeyManager<MatListOption>;\r\n    /** The option components contained within this selection-list. */\r\n    options: QueryList<MatListOption>;\r\n    /** Emits a change event whenever the selected state of an option changes. */\r\n    readonly selectionChange: EventEmitter<MatSelectionListChange>;\r\n    /**\r\n     * Tabindex of the selection list.\r\n     * @breaking-change 11.0.0 Remove `tabIndex` input.\r\n     */\r\n    tabIndex: number;\r\n    /** Theme color of the selection list. This sets the checkbox color for all list options. */\r\n    color: ThemePalette;\r\n    /**\r\n     * Function used for comparing an option against the selected value when determining which\r\n     * options should appear as selected. The first argument is the value of an options. The second\r\n     * one is a value from the selected value. A boolean must be returned.\r\n     */\r\n    compareWith: (o1: any, o2: any) => boolean;\r\n    /** Whether the selection list is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Whether selection is limited to one or multiple items (default multiple). */\r\n    get multiple(): boolean;\r\n    set multiple(value: boolean);\r\n    /** The currently selected options. */\r\n    selectedOptions: SelectionModel<MatListOption>;\r\n    /** The tabindex of the selection list. */\r\n    _tabIndex: number;\r\n    /** View to model callback that should be called whenever the selected options change. */\r\n    private _onChange;\r\n    /** Keeps track of the currently-selected value. */\r\n    _value: string[] | null;\r\n    /** Emits when the list has been destroyed. */\r\n    private _destroyed;\r\n    /** View to model callback that should be called if the list or its options lost focus. */\r\n    _onTouched: () => void;\r\n    /** Whether the list has been destroyed. */\r\n    private _isDestroyed;\r\n    constructor(_element: ElementRef<HTMLElement>, tabIndex: string, _changeDetector: ChangeDetectorRef);\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** Focuses the selection list. */\r\n    focus(options?: FocusOptions): void;\r\n    /** Selects all of the options. */\r\n    selectAll(): void;\r\n    /** Deselects all of the options. */\r\n    deselectAll(): void;\r\n    /** Sets the focused option of the selection-list. */\r\n    _setFocusedOption(option: MatListOption): void;\r\n    /**\r\n     * Removes an option from the selection list and updates the active item.\r\n     * @returns Currently-active item.\r\n     */\r\n    _removeOptionFromList(option: MatListOption): MatListOption | null;\r\n    /** Passes relevant key presses to our key manager. */\r\n    _keydown(event: KeyboardEvent): void;\r\n    /** Reports a value change to the ControlValueAccessor */\r\n    _reportValueChange(): void;\r\n    /** Emits a change event if the selected state of an option changed. */\r\n    _emitChangeEvent(option: MatListOption): void;\r\n    /**\r\n     * When the selection list is focused, we want to move focus to an option within the list. Do this\r\n     * by setting the appropriate option to be active.\r\n     */\r\n    _onFocus(): void;\r\n    /** Implemented as part of ControlValueAccessor. */\r\n    writeValue(values: string[]): void;\r\n    /** Implemented as a part of ControlValueAccessor. */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /** Implemented as part of ControlValueAccessor. */\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    /** Implemented as part of ControlValueAccessor. */\r\n    registerOnTouched(fn: () => void): void;\r\n    /** Sets the selected options based on the specified values. */\r\n    private _setOptionsFromValues;\r\n    /** Returns the values of the selected options. */\r\n    private _getSelectedOptionValues;\r\n    /** Toggles the state of the currently focused option if enabled. */\r\n    private _toggleFocusedOption;\r\n    /**\r\n     * Sets the selected state on all of the options\r\n     * and emits an event if anything changed.\r\n     */\r\n    private _setAllOptionsSelected;\r\n    /**\r\n     * Utility to ensure all indexes are valid.\r\n     * @param index The index to be checked.\r\n     * @returns True if the index is valid for our list of options.\r\n     */\r\n    private _isValidIndex;\r\n    /** Returns the index of the specified list option. */\r\n    private _getOptionIndex;\r\n    /** Marks all the options to be checked in the next change detection run. */\r\n    private _markOptionsForCheck;\r\n    /**\r\n     * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\r\n     * to tab out of it. This prevents the list from capturing focus and redirecting it back within\r\n     * the list, creating a focus trap if it user tries to tab away.\r\n     */\r\n    private _allowFocusEscape;\r\n    /** Updates the tabindex based upon if the selection list is empty. */\r\n    private _updateTabIndex;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n    static ngAcceptInputType_multiple: BooleanInput;\r\n}\r\nexport {};\r\n"]}