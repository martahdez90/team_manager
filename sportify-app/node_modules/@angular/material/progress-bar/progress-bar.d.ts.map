{"version":3,"file":"progress-bar.d.ts","sources":["progress-bar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { NumberInput } from '@angular/cdk/coercion';\r\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy } from '@angular/core';\r\nimport { CanColor, CanColorCtor } from '@angular/material/core';\r\n/** Last animation end data. */\r\nexport interface ProgressAnimationEnd {\r\n    value: number;\r\n}\r\n/** @docs-private */\r\ndeclare class MatProgressBarBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase;\r\n/**\r\n * Injection token used to provide the current location to `MatProgressBar`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nexport declare const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\r\n/**\r\n * Stubbed out location for `MatProgressBar`.\r\n * @docs-private\r\n */\r\nexport interface MatProgressBarLocation {\r\n    getPathname: () => string;\r\n}\r\n/** @docs-private */\r\nexport declare function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\r\nexport declare type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\nexport declare class MatProgressBar extends _MatProgressBarMixinBase implements CanColor, AfterViewInit, OnDestroy {\r\n    _elementRef: ElementRef;\r\n    private _ngZone;\r\n    _animationMode?: string | undefined;\r\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, _animationMode?: string | undefined, \r\n    /**\r\n     * @deprecated `location` parameter to be made required.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    location?: MatProgressBarLocation);\r\n    /** Flag that indicates whether NoopAnimations mode is set to true. */\r\n    _isNoopAnimation: boolean;\r\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n    get value(): number;\r\n    set value(v: number);\r\n    private _value;\r\n    /** Buffer value of the progress bar. Defaults to zero. */\r\n    get bufferValue(): number;\r\n    set bufferValue(v: number);\r\n    private _bufferValue;\r\n    _primaryValueBar: ElementRef;\r\n    /**\r\n     * Event emitted when animation of the primary progress bar completes. This event will not\r\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\r\n     * animations (indeterminate and query).\r\n     */\r\n    animationEnd: EventEmitter<ProgressAnimationEnd>;\r\n    /** Reference to animation end subscription to be unsubscribed on destroy. */\r\n    private _animationEndSubscription;\r\n    /**\r\n     * Mode of the progress bar.\r\n     *\r\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n     * 'determinate'.\r\n     * Mirrored to mode attribute.\r\n     */\r\n    mode: ProgressBarMode;\r\n    /** ID of the progress bar. */\r\n    progressbarId: string;\r\n    /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\r\n    _rectangleFillValue: string;\r\n    /** Gets the current transform value for the progress bar's primary indicator. */\r\n    _primaryTransform(): {\r\n        transform: string;\r\n    };\r\n    /**\r\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n     */\r\n    _bufferTransform(): {\r\n        transform: string;\r\n    } | null;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    static ngAcceptInputType_value: NumberInput;\r\n}\r\nexport {};\r\n"]}