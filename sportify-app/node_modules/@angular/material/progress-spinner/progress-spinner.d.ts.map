{"version":3,"file":"progress-spinner.d.ts","sources":["progress-spinner.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { NumberInput } from '@angular/cdk/coercion';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ElementRef, InjectionToken, OnInit } from '@angular/core';\r\nimport { CanColor, CanColorCtor } from '@angular/material/core';\r\n/** Possible mode for a progress spinner. */\r\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n/** @docs-private */\r\ndeclare class MatProgressSpinnerBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase;\r\n/** Default `mat-progress-spinner` options that can be overridden. */\r\nexport interface MatProgressSpinnerDefaultOptions {\r\n    /** Diameter of the spinner. */\r\n    diameter?: number;\r\n    /** Width of the spinner's stroke. */\r\n    strokeWidth?: number;\r\n    /**\r\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\r\n     * using NoopAnimationsModule.\r\n     */\r\n    _forceAnimations?: boolean;\r\n}\r\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\r\nexport declare const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS: InjectionToken<MatProgressSpinnerDefaultOptions>;\r\n/** @docs-private */\r\nexport declare function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions;\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\nexport declare class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\r\n    _elementRef: ElementRef<HTMLElement>;\r\n    private _document;\r\n    private _diameter;\r\n    private _value;\r\n    private _strokeWidth;\r\n    private _fallbackAnimation;\r\n    /**\r\n     * Element to which we should add the generated style tags for the indeterminate animation.\r\n     * For most elements this is the document, but for the ones in the Shadow DOM we need to\r\n     * use the shadow root.\r\n     */\r\n    private _styleRoot;\r\n    /**\r\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\r\n     * We need to keep track of which elements the diameters were attached to, because for\r\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\r\n     * than the document head.\r\n     */\r\n    private static _diameters;\r\n    /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\r\n    _noopAnimations: boolean;\r\n    /** The diameter of the progress spinner (will set width and height of svg). */\r\n    get diameter(): number;\r\n    set diameter(size: number);\r\n    /** Stroke width of the progress spinner. */\r\n    get strokeWidth(): number;\r\n    set strokeWidth(value: number);\r\n    /** Mode of the progress circle */\r\n    mode: ProgressSpinnerMode;\r\n    /** Value of the progress circle. */\r\n    get value(): number;\r\n    set value(newValue: number);\r\n    constructor(_elementRef: ElementRef<HTMLElement>, platform: Platform, _document: any, animationMode: string, defaults?: MatProgressSpinnerDefaultOptions);\r\n    ngOnInit(): void;\r\n    /** The radius of the spinner, adjusted for stroke width. */\r\n    get _circleRadius(): number;\r\n    /** The view box of the spinner's svg element. */\r\n    get _viewBox(): string;\r\n    /** The stroke circumference of the svg circle. */\r\n    get _strokeCircumference(): number;\r\n    /** The dash offset of the svg circle. */\r\n    get _strokeDashOffset(): number | null;\r\n    /** Stroke width of the circle in percent. */\r\n    get _circleStrokeWidth(): number;\r\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n    private _attachStyleNode;\r\n    /** Generates animation styles adjusted for the spinner's diameter. */\r\n    private _getAnimationText;\r\n    static ngAcceptInputType_diameter: NumberInput;\r\n    static ngAcceptInputType_strokeWidth: NumberInput;\r\n    static ngAcceptInputType_value: NumberInput;\r\n}\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\nexport declare class MatSpinner extends MatProgressSpinner {\r\n    constructor(elementRef: ElementRef<HTMLElement>, platform: Platform, document: any, animationMode: string, defaults?: MatProgressSpinnerDefaultOptions);\r\n}\r\nexport {};\r\n"]}