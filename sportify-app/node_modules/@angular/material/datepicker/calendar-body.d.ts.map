{"version":3,"file":"calendar-body.d.ts","sources":["calendar-body.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ElementRef, EventEmitter, NgZone, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\r\n/**\r\n * Extra CSS classes that can be associated with a calendar cell.\r\n */\r\nexport declare type MatCalendarCellCssClasses = string | string[] | Set<string> | {\r\n    [key: string]: any;\r\n};\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport declare class MatCalendarCell<D = any> {\r\n    value: number;\r\n    displayValue: string;\r\n    ariaLabel: string;\r\n    enabled: boolean;\r\n    cssClasses: MatCalendarCellCssClasses;\r\n    compareValue: number;\r\n    rawValue?: D | undefined;\r\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: MatCalendarCellCssClasses, compareValue?: number, rawValue?: D | undefined);\r\n}\r\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\r\nexport interface MatCalendarUserEvent<D> {\r\n    value: D;\r\n    event: Event;\r\n}\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\nexport declare class MatCalendarBody implements OnChanges, OnDestroy {\r\n    private _elementRef;\r\n    private _ngZone;\r\n    /**\r\n     * Used to skip the next focus event when rendering the preview range.\r\n     * We need a flag like this, because some browsers fire focus events asynchronously.\r\n     */\r\n    private _skipNextFocus;\r\n    /** The label for the table. (e.g. \"Jan 2017\"). */\r\n    label: string;\r\n    /** The cells to display in the table. */\r\n    rows: MatCalendarCell[][];\r\n    /** The value in the table that corresponds to today. */\r\n    todayValue: number;\r\n    /** Start value of the selected date range. */\r\n    startValue: number;\r\n    /** End value of the selected date range. */\r\n    endValue: number;\r\n    /** The minimum number of free cells needed to fit the label in the first row. */\r\n    labelMinRequiredCells: number;\r\n    /** The number of columns in the table. */\r\n    numCols: number;\r\n    /** The cell number of the active cell in the table. */\r\n    activeCell: number;\r\n    /** Whether a range is being selected. */\r\n    isRange: boolean;\r\n    /**\r\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n     * maintained even as the table resizes.\r\n     */\r\n    cellAspectRatio: number;\r\n    /** Start of the comparison range. */\r\n    comparisonStart: number | null;\r\n    /** End of the comparison range. */\r\n    comparisonEnd: number | null;\r\n    /** Start of the preview range. */\r\n    previewStart: number | null;\r\n    /** End of the preview range. */\r\n    previewEnd: number | null;\r\n    /** Emits when a new value is selected. */\r\n    readonly selectedValueChange: EventEmitter<MatCalendarUserEvent<number>>;\r\n    /** Emits when the preview has changed as a result of a user action. */\r\n    previewChange: EventEmitter<MatCalendarUserEvent<MatCalendarCell<any> | null>>;\r\n    /** The number of blank cells to put at the beginning for the first row. */\r\n    _firstRowOffset: number;\r\n    /** Padding for the individual date cells. */\r\n    _cellPadding: string;\r\n    /** Width of an individual cell. */\r\n    _cellWidth: string;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);\r\n    /** Called when a cell is clicked. */\r\n    _cellClicked(cell: MatCalendarCell, event: MouseEvent): void;\r\n    /** Returns whether a cell should be marked as selected. */\r\n    _isSelected(cell: MatCalendarCell): boolean;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** Returns whether a cell is active. */\r\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell(movePreview?: boolean): void;\r\n    /** Gets whether a value is the start of the main range. */\r\n    _isRangeStart(value: number): boolean;\r\n    /** Gets whether a value is the end of the main range. */\r\n    _isRangeEnd(value: number): boolean;\r\n    /** Gets whether a value is within the currently-selected range. */\r\n    _isInRange(value: number): boolean;\r\n    /** Gets whether a value is the start of the comparison range. */\r\n    _isComparisonStart(value: number): boolean;\r\n    /** Whether the cell is a start bridge cell between the main and comparison ranges. */\r\n    _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number): boolean;\r\n    /** Whether the cell is an end bridge cell between the main and comparison ranges. */\r\n    _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number): boolean;\r\n    /** Gets whether a value is the end of the comparison range. */\r\n    _isComparisonEnd(value: number): boolean;\r\n    /** Gets whether a value is within the current comparison range. */\r\n    _isInComparisonRange(value: number): boolean;\r\n    /** Gets whether a value is the start of the preview range. */\r\n    _isPreviewStart(value: number): boolean;\r\n    /** Gets whether a value is the end of the preview range. */\r\n    _isPreviewEnd(value: number): boolean;\r\n    /** Gets whether a value is inside the preview range. */\r\n    _isInPreview(value: number): boolean;\r\n    /**\r\n     * Event handler for when the user enters an element\r\n     * inside the calendar body (e.g. by hovering in or focus).\r\n     */\r\n    private _enterHandler;\r\n    /**\r\n     * Event handler for when the user's pointer leaves an element\r\n     * inside the calendar body (e.g. by hovering out or blurring).\r\n     */\r\n    private _leaveHandler;\r\n    /** Finds the MatCalendarCell that corresponds to a DOM node. */\r\n    private _getCellFromElement;\r\n}\r\n"]}