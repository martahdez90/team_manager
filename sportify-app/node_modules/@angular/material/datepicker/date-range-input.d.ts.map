{"version":3,"file":"date-range-input.d.ts","sources":["date-range-input.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { OnDestroy, AfterContentInit, ChangeDetectorRef, ElementRef } from '@angular/core';\r\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\r\nimport { ThemePalette, DateAdapter } from '@angular/material/core';\r\nimport { NgControl, ControlContainer } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { MatStartDate, MatEndDate, MatDateRangeInputParent } from './date-range-input-parts';\r\nimport { MatDatepickerControl } from './datepicker-base';\r\nimport { DateFilterFn } from './datepicker-input-base';\r\nimport { MatDateRangePicker, MatDateRangePickerInput } from './date-range-picker';\r\nimport { DateRange } from './date-selection-model';\r\nexport declare class MatDateRangeInput<D> implements MatFormFieldControl<DateRange<D>>, MatDatepickerControl<D>, MatDateRangeInputParent<D>, MatDateRangePickerInput<D>, AfterContentInit, OnDestroy {\r\n    private _changeDetectorRef;\r\n    private _elementRef;\r\n    private _dateAdapter;\r\n    private _formField?;\r\n    /** Current value of the range input. */\r\n    get value(): DateRange<D> | null;\r\n    /** Emits when the input's state has changed. */\r\n    stateChanges: Subject<void>;\r\n    /** Unique ID for the input. */\r\n    id: string;\r\n    /** Whether the control is focused. */\r\n    focused: boolean;\r\n    /** Whether the control's label should float. */\r\n    get shouldLabelFloat(): boolean;\r\n    /** Name of the form control. */\r\n    controlType: string;\r\n    /**\r\n     * Implemented as a part of `MatFormFieldControl`.\r\n     * Set the placeholder attribute on `matStartDate` and `matEndDate`.\r\n     * @docs-private\r\n     */\r\n    get placeholder(): string;\r\n    /** The range picker that this input is associated with. */\r\n    get rangePicker(): MatDateRangePicker<D>;\r\n    set rangePicker(rangePicker: MatDateRangePicker<D>);\r\n    private _rangePicker;\r\n    /** Whether the input is required. */\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    private _required;\r\n    /** Function that can be used to filter out dates within the date range picker. */\r\n    get dateFilter(): DateFilterFn<D>;\r\n    set dateFilter(value: DateFilterFn<D>);\r\n    private _dateFilter;\r\n    /** The minimum valid date. */\r\n    get min(): D | null;\r\n    set min(value: D | null);\r\n    private _min;\r\n    /** The maximum valid date. */\r\n    get max(): D | null;\r\n    set max(value: D | null);\r\n    private _max;\r\n    /** Whether the input is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    _groupDisabled: boolean;\r\n    /** Whether the input is in an error state. */\r\n    get errorState(): boolean;\r\n    /** Whether the datepicker input is empty. */\r\n    get empty(): boolean;\r\n    /** Value for the `aria-describedby` attribute of the inputs. */\r\n    _ariaDescribedBy: string | null;\r\n    /** Date selection model currently registered with the input. */\r\n    private _model;\r\n    /** Separator text to be shown between the inputs. */\r\n    separator: string;\r\n    /** Start of the comparison range that should be shown in the calendar. */\r\n    comparisonStart: D | null;\r\n    /** End of the comparison range that should be shown in the calendar. */\r\n    comparisonEnd: D | null;\r\n    _startInput: MatStartDate<D>;\r\n    _endInput: MatEndDate<D>;\r\n    /**\r\n     * Implemented as a part of `MatFormFieldControl`.\r\n     * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\r\n     * @docs-private\r\n     */\r\n    ngControl: NgControl | null;\r\n    /** Emits when the input's disabled state changes. */\r\n    _disabledChange: Subject<boolean>;\r\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, control: ControlContainer, _dateAdapter: DateAdapter<D>, _formField?: MatFormField | undefined);\r\n    /**\r\n     * Implemented as a part of `MatFormFieldControl`.\r\n     * @docs-private\r\n     */\r\n    setDescribedByIds(ids: string[]): void;\r\n    /**\r\n     * Implemented as a part of `MatFormFieldControl`.\r\n     * @docs-private\r\n     */\r\n    onContainerClick(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Gets the date at which the calendar should start. */\r\n    getStartValue(): D | null;\r\n    /** Gets the input's theme palette. */\r\n    getThemePalette(): ThemePalette;\r\n    /** Gets the element to which the calendar overlay should be attached. */\r\n    getConnectedOverlayOrigin(): ElementRef;\r\n    /** Gets the value that is used to mirror the state input. */\r\n    _getInputMirrorValue(): string;\r\n    /** Whether the input placeholders should be hidden. */\r\n    _shouldHidePlaceholders(): boolean;\r\n    /** Handles the value in one of the child inputs changing. */\r\n    _handleChildValueChange(): void;\r\n    /** Opens the date range picker associated with the input. */\r\n    _openDatepicker(): void;\r\n    /** Whether the separate text should be hidden. */\r\n    _shouldHideSeparator(): boolean;\r\n    /** Gets the value for the `aria-labelledby` attribute of the inputs. */\r\n    _getAriaLabelledby(): string | null;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull;\r\n    /** Re-runs the validators on the start/end inputs. */\r\n    private _revalidate;\r\n    /** Registers the current date selection model with the start/end inputs. */\r\n    private _registerModel;\r\n    static ngAcceptInputType_required: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n"]}