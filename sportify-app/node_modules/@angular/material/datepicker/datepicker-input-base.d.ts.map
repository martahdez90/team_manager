{"version":3,"file":"datepicker-input-base.d.ts","sources":["datepicker-input-base.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, EventEmitter, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\r\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\r\nimport { ExtractDateTypeFromSelection, MatDateSelectionModel } from './date-selection-model';\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport declare class MatDatepickerInputEvent<D, S = unknown> {\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    target: MatDatepickerInputBase<S, D>;\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    targetElement: HTMLElement;\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n    constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    target: MatDatepickerInputBase<S, D>, \r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    targetElement: HTMLElement);\r\n}\r\n/** Function that can be used to filter out dates from a calendar. */\r\nexport declare type DateFilterFn<D> = (date: D | null) => boolean;\r\n/** Base class for datepicker inputs. */\r\nexport declare abstract class MatDatepickerInputBase<S, D = ExtractDateTypeFromSelection<S>> implements ControlValueAccessor, AfterViewInit, OnDestroy, Validator {\r\n    protected _elementRef: ElementRef<HTMLInputElement>;\r\n    _dateAdapter: DateAdapter<D>;\r\n    private _dateFormats;\r\n    /** Whether the component has been initialized. */\r\n    private _isInitialized;\r\n    /** The value of the input. */\r\n    get value(): D | null;\r\n    set value(value: D | null);\r\n    protected _model: MatDateSelectionModel<S, D> | undefined;\r\n    /** Whether the datepicker-input is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    readonly dateChange: EventEmitter<MatDatepickerInputEvent<D, S>>;\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    readonly dateInput: EventEmitter<MatDatepickerInputEvent<D, S>>;\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange: EventEmitter<D | null>;\r\n    /** Emits when the disabled state has changed */\r\n    _disabledChange: EventEmitter<boolean>;\r\n    _onTouched: () => void;\r\n    _validatorOnChange: () => void;\r\n    protected _cvaOnChange: (value: any) => void;\r\n    private _valueChangesSubscription;\r\n    private _localeSubscription;\r\n    /**\r\n     * Since the value is kept on the model which is assigned in an Input,\r\n     * we might get a value before we have a model. This property keeps track\r\n     * of the value until we have somewhere to assign it.\r\n     */\r\n    private _pendingValue;\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator;\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator;\r\n    /** The form control validator for the min date. */\r\n    private _minValidator;\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator;\r\n    /** Gets the base validator functions. */\r\n    protected _getValidators(): ValidatorFn[];\r\n    /** Gets the minimum date for the input. Used for validation. */\r\n    abstract _getMinDate(): D | null;\r\n    /** Gets the maximum date for the input. Used for validation. */\r\n    abstract _getMaxDate(): D | null;\r\n    /** Gets the date filter function. Used for validation. */\r\n    protected abstract _getDateFilter(): DateFilterFn<D> | undefined;\r\n    /** Registers a date selection model with the input. */\r\n    _registerModel(model: MatDateSelectionModel<S, D>): void;\r\n    /** Opens the popup associated with the input. */\r\n    protected abstract _openPopup(): void;\r\n    /** Assigns a value to the input's model. */\r\n    protected abstract _assignValueToModel(model: D | null): void;\r\n    /** Converts a value from the model into a native value for the input. */\r\n    protected abstract _getValueFromModel(modelValue: S): D | null;\r\n    /** Combined form control validator for this input. */\r\n    protected abstract _validator: ValidatorFn | null;\r\n    /**\r\n     * Callback that'll be invoked when the selection model is changed\r\n     * from somewhere that's not the current datepicker input.\r\n     */\r\n    protected abstract _outsideValueChanged?: () => void;\r\n    /** Whether the last value set on the input was valid. */\r\n    protected _lastValueValid: boolean;\r\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    /** @docs-private */\r\n    validate(c: AbstractControl): ValidationErrors | null;\r\n    writeValue(value: D): void;\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    _onKeydown(event: KeyboardEvent): void;\r\n    _onInput(value: string): void;\r\n    _onChange(): void;\r\n    /** Handles blur events on the input. */\r\n    _onBlur(): void;\r\n    /** Formats a value and sets it on the input element. */\r\n    protected _formatValue(value: D | null): void;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    protected _getValidDateOrNull(obj: any): D | null;\r\n    /** Assigns a value to the model. */\r\n    private _assignValue;\r\n    /** Whether a value is considered valid. */\r\n    private _isValidValue;\r\n    /**\r\n     * Checks whether a parent control is disabled. This is in place so that it can be overridden\r\n     * by inputs extending this one which can be placed inside of a group that can be disabled.\r\n     */\r\n    protected _parentDisabled(): boolean;\r\n    static ngAcceptInputType_value: any;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n"]}