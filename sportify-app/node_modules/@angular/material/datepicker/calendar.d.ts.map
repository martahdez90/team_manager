{"version":3,"file":"calendar.d.ts","sources":["calendar.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ComponentType, Portal } from '@angular/cdk/portal';\r\nimport { AfterContentInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatCalendarCellCssClasses, MatCalendarUserEvent } from './calendar-body';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\nimport { MatMonthView } from './month-view';\r\nimport { MatMultiYearView } from './multi-year-view';\r\nimport { MatYearView } from './year-view';\r\nimport { DateRange } from './date-selection-model';\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport declare type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n/** Default header for MatCalendar */\r\nexport declare class MatCalendarHeader<D> {\r\n    private _intl;\r\n    calendar: MatCalendar<D>;\r\n    private _dateAdapter;\r\n    private _dateFormats;\r\n    constructor(_intl: MatDatepickerIntl, calendar: MatCalendar<D>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, changeDetectorRef: ChangeDetectorRef);\r\n    /** The label for the current calendar view. */\r\n    get periodButtonText(): string;\r\n    get periodButtonLabel(): string;\r\n    /** The label for the previous button. */\r\n    get prevButtonLabel(): string;\r\n    /** The label for the next button. */\r\n    get nextButtonLabel(): string;\r\n    /** Handles user clicks on the period label. */\r\n    currentPeriodClicked(): void;\r\n    /** Handles user clicks on the previous button. */\r\n    previousClicked(): void;\r\n    /** Handles user clicks on the next button. */\r\n    nextClicked(): void;\r\n    /** Whether the previous period button is enabled. */\r\n    previousEnabled(): boolean;\r\n    /** Whether the next period button is enabled. */\r\n    nextEnabled(): boolean;\r\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n    private _isSameView;\r\n}\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\nexport declare class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n    private _dateAdapter;\r\n    private _dateFormats;\r\n    private _changeDetectorRef;\r\n    /** An input indicating the type of the header component, if set. */\r\n    headerComponent: ComponentType<any>;\r\n    /** A portal containing the header component type for this calendar. */\r\n    _calendarHeaderPortal: Portal<any>;\r\n    private _intlChanges;\r\n    /**\r\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n     * We need to schedule it, rather than do it immediately, because we have to wait\r\n     * for Angular to re-evaluate the view children.\r\n     */\r\n    private _moveFocusOnNextTick;\r\n    /** A date representing the period (month or year) to start the calendar in. */\r\n    get startAt(): D | null;\r\n    set startAt(value: D | null);\r\n    private _startAt;\r\n    /** Whether the calendar should be started in month or year view. */\r\n    startView: MatCalendarView;\r\n    /** The currently selected date. */\r\n    get selected(): DateRange<D> | D | null;\r\n    set selected(value: DateRange<D> | D | null);\r\n    private _selected;\r\n    /** The minimum selectable date. */\r\n    get minDate(): D | null;\r\n    set minDate(value: D | null);\r\n    private _minDate;\r\n    /** The maximum selectable date. */\r\n    get maxDate(): D | null;\r\n    set maxDate(value: D | null);\r\n    private _maxDate;\r\n    /** Function used to filter which dates are selectable. */\r\n    dateFilter: (date: D) => boolean;\r\n    /** Function that can be used to add custom CSS classes to dates. */\r\n    dateClass: (date: D) => MatCalendarCellCssClasses;\r\n    /** Start of the comparison range. */\r\n    comparisonStart: D | null;\r\n    /** End of the comparison range. */\r\n    comparisonEnd: D | null;\r\n    /**\r\n     * Emits when the currently selected date changes.\r\n     * @breaking-change 11.0.0 Emitted value to change to `D | null`.\r\n     */\r\n    readonly selectedChange: EventEmitter<D>;\r\n    /**\r\n     * Emits the year chosen in multiyear view.\r\n     * This doesn't imply a change on the selected date.\r\n     */\r\n    readonly yearSelected: EventEmitter<D>;\r\n    /**\r\n     * Emits the month chosen in year view.\r\n     * This doesn't imply a change on the selected date.\r\n     */\r\n    readonly monthSelected: EventEmitter<D>;\r\n    /** Emits when any date is selected. */\r\n    readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>>;\r\n    /** Reference to the current month view component. */\r\n    monthView: MatMonthView<D>;\r\n    /** Reference to the current year view component. */\r\n    yearView: MatYearView<D>;\r\n    /** Reference to the current multi-year view component. */\r\n    multiYearView: MatMultiYearView<D>;\r\n    /**\r\n     * The current active date. This determines which time period is shown and which date is\r\n     * highlighted when using keyboard navigation.\r\n     */\r\n    get activeDate(): D;\r\n    set activeDate(value: D);\r\n    private _clampedActiveDate;\r\n    /** Whether the calendar is in month view. */\r\n    get currentView(): MatCalendarView;\r\n    set currentView(value: MatCalendarView);\r\n    private _currentView;\r\n    /**\r\n     * Emits whenever there is a state change that the header may need to respond to.\r\n     */\r\n    stateChanges: Subject<void>;\r\n    constructor(_intl: MatDatepickerIntl, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _changeDetectorRef: ChangeDetectorRef);\r\n    ngAfterContentInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    focusActiveCell(): void;\r\n    /** Updates today's date after an update of the active date */\r\n    updateTodaysDate(): void;\r\n    /** Handles date selection in the month view. */\r\n    _dateSelected(event: MatCalendarUserEvent<D | null>): void;\r\n    /** Handles year selection in the multiyear view. */\r\n    _yearSelectedInMultiYearView(normalizedYear: D): void;\r\n    /** Handles month selection in the year view. */\r\n    _monthSelectedInYearView(normalizedMonth: D): void;\r\n    /** Handles year/month selection in the multi-year/year views. */\r\n    _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull;\r\n    /** Returns the component instance that corresponds to the current calendar view. */\r\n    private _getCurrentViewComponent;\r\n}\r\n"]}