{"version":3,"file":"snack-bar.d.ts","sources":["snack-bar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { EmbeddedViewRef, InjectionToken, Injector, TemplateRef, OnDestroy, Type } from '@angular/core';\r\nimport { TextOnlySnackBar } from './simple-snack-bar';\r\nimport { MatSnackBarConfig } from './snack-bar-config';\r\nimport { _SnackBarContainer } from './snack-bar-container';\r\nimport { MatSnackBarRef } from './snack-bar-ref';\r\n/** Injection token that can be used to specify default snack bar. */\r\nexport declare const MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;\r\n/** @docs-private */\r\nexport declare function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig;\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\nexport declare class MatSnackBar implements OnDestroy {\r\n    private _overlay;\r\n    private _live;\r\n    private _injector;\r\n    private _breakpointObserver;\r\n    private _parentSnackBar;\r\n    private _defaultConfig;\r\n    /**\r\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n     * If there is a parent snack-bar service, all operations should delegate to that parent\r\n     * via `_openedSnackBarRef`.\r\n     */\r\n    private _snackBarRefAtThisLevel;\r\n    /** The component that should be rendered as the snack bar's simple component. */\r\n    protected simpleSnackBarComponent: Type<TextOnlySnackBar>;\r\n    /** The container component that attaches the provided template or component. */\r\n    protected snackBarContainerComponent: Type<_SnackBarContainer>;\r\n    /** The CSS class to applie for handset mode. */\r\n    protected handsetCssClass: string;\r\n    /** Reference to the currently opened snackbar at *any* level. */\r\n    get _openedSnackBarRef(): MatSnackBarRef<any> | null;\r\n    set _openedSnackBarRef(value: MatSnackBarRef<any> | null);\r\n    constructor(_overlay: Overlay, _live: LiveAnnouncer, _injector: Injector, _breakpointObserver: BreakpointObserver, _parentSnackBar: MatSnackBar, _defaultConfig: MatSnackBarConfig);\r\n    /**\r\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n     * currently opened snack bars.\r\n     *\r\n     * @param component Component to be instantiated.\r\n     * @param config Extra configuration for the snack bar.\r\n     */\r\n    openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T>;\r\n    /**\r\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\r\n     * currently opened snack bars.\r\n     *\r\n     * @param template Template to be instantiated.\r\n     * @param config Extra configuration for the snack bar.\r\n     */\r\n    openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig): MatSnackBarRef<EmbeddedViewRef<any>>;\r\n    /**\r\n     * Opens a snackbar with a message and an optional action.\r\n     * @param message The message to show in the snackbar.\r\n     * @param action The label for the snackbar action.\r\n     * @param config Additional configuration options for the snackbar.\r\n     */\r\n    open(message: string, action?: string, config?: MatSnackBarConfig): MatSnackBarRef<TextOnlySnackBar>;\r\n    /**\r\n     * Dismisses the currently-visible snack bar.\r\n     */\r\n    dismiss(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Attaches the snack bar container component to the overlay.\r\n     */\r\n    private _attachSnackBarContainer;\r\n    /**\r\n     * Places a new component or a template as the content of the snack bar container.\r\n     */\r\n    private _attach;\r\n    /** Animates the old snack bar out and the new one in. */\r\n    private _animateSnackBar;\r\n    /**\r\n     * Creates a new overlay and places it in the correct location.\r\n     * @param config The user-specified snack bar config.\r\n     */\r\n    private _createOverlay;\r\n    /**\r\n     * Creates an injector to be used inside of a snack bar component.\r\n     * @param config Config that was used to create the snack bar.\r\n     * @param snackBarRef Reference to the snack bar.\r\n     */\r\n    private _createInjector;\r\n}\r\n"]}