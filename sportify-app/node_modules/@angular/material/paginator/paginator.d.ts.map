{"version":3,"file":"paginator.d.ts","sources":["paginator.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput, NumberInput } from '@angular/cdk/coercion';\r\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, InjectionToken } from '@angular/core';\r\nimport { MatPaginatorIntl } from './paginator-intl';\r\nimport { HasInitialized, HasInitializedCtor, ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\r\n/**\r\n * Change event object that is emitted when the user selects a\r\n * different page size or navigates to another page.\r\n */\r\nexport declare class PageEvent {\r\n    /** The current page index. */\r\n    pageIndex: number;\r\n    /**\r\n     * Index of the page that was selected previously.\r\n     * @breaking-change 8.0.0 To be made into a required property.\r\n     */\r\n    previousPageIndex?: number;\r\n    /** The current page size */\r\n    pageSize: number;\r\n    /** The current total number of items being paged */\r\n    length: number;\r\n}\r\n/** Object that can be used to configure the default options for the paginator module. */\r\nexport interface MatPaginatorDefaultOptions {\r\n    /** Number of items to display on a page. By default set to 50. */\r\n    pageSize?: number;\r\n    /** The set of provided page size options to display to the user. */\r\n    pageSizeOptions?: number[];\r\n    /** Whether to hide the page size selection UI from the user. */\r\n    hidePageSize?: boolean;\r\n    /** Whether to show the first/last buttons UI to the user. */\r\n    showFirstLastButtons?: boolean;\r\n}\r\n/** Injection token that can be used to provide the default options for the paginator module. */\r\nexport declare const MAT_PAGINATOR_DEFAULT_OPTIONS: InjectionToken<MatPaginatorDefaultOptions>;\r\n/** @docs-private */\r\ndeclare class MatPaginatorBase {\r\n}\r\ndeclare const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase;\r\n/**\r\n * Component to provide navigation between paged information. Displays the size of the current\r\n * page, user-selectable options to change that size, what items are being shown, and\r\n * navigational button to go to the previous or next page.\r\n */\r\nexport declare class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable, HasInitialized {\r\n    _intl: MatPaginatorIntl;\r\n    private _changeDetectorRef;\r\n    private _initialized;\r\n    private _intlChanges;\r\n    /** Theme color to be used for the underlying form controls. */\r\n    color: ThemePalette;\r\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\r\n    get pageIndex(): number;\r\n    set pageIndex(value: number);\r\n    private _pageIndex;\r\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\r\n    get length(): number;\r\n    set length(value: number);\r\n    private _length;\r\n    /** Number of items to display on a page. By default set to 50. */\r\n    get pageSize(): number;\r\n    set pageSize(value: number);\r\n    private _pageSize;\r\n    /** The set of provided page size options to display to the user. */\r\n    get pageSizeOptions(): number[];\r\n    set pageSizeOptions(value: number[]);\r\n    private _pageSizeOptions;\r\n    /** Whether to hide the page size selection UI from the user. */\r\n    get hidePageSize(): boolean;\r\n    set hidePageSize(value: boolean);\r\n    private _hidePageSize;\r\n    /** Whether to show the first/last buttons UI to the user. */\r\n    get showFirstLastButtons(): boolean;\r\n    set showFirstLastButtons(value: boolean);\r\n    private _showFirstLastButtons;\r\n    /** Event emitted when the paginator changes the page size or page index. */\r\n    readonly page: EventEmitter<PageEvent>;\r\n    /** Displayed set of page size options. Will be sorted and include current page size. */\r\n    _displayedPageSizeOptions: number[];\r\n    constructor(_intl: MatPaginatorIntl, _changeDetectorRef: ChangeDetectorRef, defaults?: MatPaginatorDefaultOptions);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Advances to the next page if it exists. */\r\n    nextPage(): void;\r\n    /** Move back to the previous page if it exists. */\r\n    previousPage(): void;\r\n    /** Move to the first page if not already there. */\r\n    firstPage(): void;\r\n    /** Move to the last page if not already there. */\r\n    lastPage(): void;\r\n    /** Whether there is a previous page. */\r\n    hasPreviousPage(): boolean;\r\n    /** Whether there is a next page. */\r\n    hasNextPage(): boolean;\r\n    /** Calculate the number of pages */\r\n    getNumberOfPages(): number;\r\n    /**\r\n     * Changes the page size so that the first item displayed on the page will still be\r\n     * displayed using the new page size.\r\n     *\r\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\r\n     * switching so that the page size is 5 will set the third page as the current page so\r\n     * that the 10th item will still be displayed.\r\n     */\r\n    _changePageSize(pageSize: number): void;\r\n    /** Checks whether the buttons for going forwards should be disabled. */\r\n    _nextButtonsDisabled(): boolean;\r\n    /** Checks whether the buttons for going backwards should be disabled. */\r\n    _previousButtonsDisabled(): boolean;\r\n    /**\r\n     * Updates the list of page size options to display to the user. Includes making sure that\r\n     * the page size is an option and that the list is sorted.\r\n     */\r\n    private _updateDisplayedPageSizeOptions;\r\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\r\n    private _emitPageEvent;\r\n    static ngAcceptInputType_pageIndex: NumberInput;\r\n    static ngAcceptInputType_length: NumberInput;\r\n    static ngAcceptInputType_pageSize: NumberInput;\r\n    static ngAcceptInputType_hidePageSize: BooleanInput;\r\n    static ngAcceptInputType_showFirstLastButtons: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\nexport {};\r\n"]}