{"version":3,"file":"sort.d.ts","sources":["sort.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\r\nimport { CanDisable, CanDisableCtor, HasInitialized, HasInitializedCtor } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { SortDirection } from './sort-direction';\r\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\r\nexport interface MatSortable {\r\n    /** The id of the column being sorted. */\r\n    id: string;\r\n    /** Starting sort direction. */\r\n    start: 'asc' | 'desc';\r\n    /** Whether to disable clearing the sorting state. */\r\n    disableClear: boolean;\r\n}\r\n/** The current sort state. */\r\nexport interface Sort {\r\n    /** The id of the column being sorted. */\r\n    active: string;\r\n    /** The sort direction. */\r\n    direction: SortDirection;\r\n}\r\n/** @docs-private */\r\ndeclare class MatSortBase {\r\n}\r\ndeclare const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase;\r\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\r\nexport declare class MatSort extends _MatSortMixinBase implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\r\n    /** Collection of all registered sortables that this directive manages. */\r\n    sortables: Map<string, MatSortable>;\r\n    /** Used to notify any child components listening to state changes. */\r\n    readonly _stateChanges: Subject<void>;\r\n    /** The id of the most recently sorted MatSortable. */\r\n    active: string;\r\n    /**\r\n     * The direction to set when an MatSortable is initially sorted.\r\n     * May be overriden by the MatSortable's sort start.\r\n     */\r\n    start: 'asc' | 'desc';\r\n    /** The sort direction of the currently active MatSortable. */\r\n    get direction(): SortDirection;\r\n    set direction(direction: SortDirection);\r\n    private _direction;\r\n    /**\r\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n     * May be overriden by the MatSortable's disable clear input.\r\n     */\r\n    get disableClear(): boolean;\r\n    set disableClear(v: boolean);\r\n    private _disableClear;\r\n    /** Event emitted when the user changes either the active sort or sort direction. */\r\n    readonly sortChange: EventEmitter<Sort>;\r\n    /**\r\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n     * collection of MatSortables.\r\n     */\r\n    register(sortable: MatSortable): void;\r\n    /**\r\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n     * collection of contained MatSortables.\r\n     */\r\n    deregister(sortable: MatSortable): void;\r\n    /** Sets the active sort id and determines the new sort direction. */\r\n    sort(sortable: MatSortable): void;\r\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n    getNextSortDirection(sortable: MatSortable): SortDirection;\r\n    ngOnInit(): void;\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n    static ngAcceptInputType_disableClear: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\nexport {};\r\n"]}