{"version":3,"file":"stepper.d.ts","sources":["stepper.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatStepHeader } from './step-header';\r\nimport { MatStepLabel } from './step-label';\r\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\r\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher {\r\n    private _errorStateMatcher;\r\n    /** Content for step label given by `<ng-template matStepLabel>`. */\r\n    stepLabel: MatStepLabel;\r\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\r\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, stepperOptions?: StepperOptions);\r\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\r\n}\r\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\r\n    /** The list of step headers of the steps in the stepper. */\r\n    _stepHeader: QueryList<MatStepHeader>;\r\n    /** Steps that the stepper holds. */\r\n    _steps: QueryList<MatStep>;\r\n    /** Custom icon overrides passed in by the consumer. */\r\n    _icons: QueryList<MatStepperIcon>;\r\n    /** Event emitted when the current step is done transitioning in. */\r\n    readonly animationDone: EventEmitter<void>;\r\n    /** Whether ripples should be disabled for the step headers. */\r\n    disableRipple: boolean;\r\n    /** Consumer-specified template-refs to be used to override the header icons. */\r\n    _iconOverrides: {\r\n        [key: string]: TemplateRef<MatStepperIconContext>;\r\n    };\r\n    /** Stream of animation `done` events when the body expands/collapses. */\r\n    _animationDone: Subject<AnimationEvent>;\r\n    ngAfterContentInit(): void;\r\n    static ngAcceptInputType_editable: BooleanInput;\r\n    static ngAcceptInputType_optional: BooleanInput;\r\n    static ngAcceptInputType_completed: BooleanInput;\r\n    static ngAcceptInputType_hasError: BooleanInput;\r\n}\r\nexport declare class MatHorizontalStepper extends MatStepper {\r\n    /** Whether the label should display in bottom or end position. */\r\n    labelPosition: 'bottom' | 'end';\r\n    static ngAcceptInputType_editable: BooleanInput;\r\n    static ngAcceptInputType_optional: BooleanInput;\r\n    static ngAcceptInputType_completed: BooleanInput;\r\n    static ngAcceptInputType_hasError: BooleanInput;\r\n}\r\nexport declare class MatVerticalStepper extends MatStepper {\r\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef?: ElementRef<HTMLElement>, _document?: any);\r\n    static ngAcceptInputType_editable: BooleanInput;\r\n    static ngAcceptInputType_optional: BooleanInput;\r\n    static ngAcceptInputType_completed: BooleanInput;\r\n    static ngAcceptInputType_hasError: BooleanInput;\r\n}\r\n"]}