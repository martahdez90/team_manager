{"version":3,"file":"autocomplete.d.ts","sources":["autocomplete.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef, OnDestroy } from '@angular/core';\r\nimport { CanDisableRipple, CanDisableRippleCtor, MatOptgroup, MatOption } from '@angular/material/core';\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport declare class MatAutocompleteSelectedEvent {\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    source: MatAutocomplete;\r\n    /** Option that was selected. */\r\n    option: MatOption;\r\n    constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    source: MatAutocomplete, \r\n    /** Option that was selected. */\r\n    option: MatOption);\r\n}\r\n/** Event object that is emitted when an autocomplete option is activated. */\r\nexport interface MatAutocompleteActivatedEvent {\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    source: MatAutocomplete;\r\n    /** Option that was selected. */\r\n    option: MatOption | null;\r\n}\r\n/** @docs-private */\r\ndeclare class MatAutocompleteBase {\r\n}\r\ndeclare const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase;\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n    autoActiveFirstOption?: boolean;\r\n}\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport declare const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\r\n/** @docs-private */\r\nexport declare function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions;\r\nexport declare class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit, CanDisableRipple, OnDestroy {\r\n    private _changeDetectorRef;\r\n    private _elementRef;\r\n    private _activeOptionChanges;\r\n    /** Manages active item in option list based on key events. */\r\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n    /** Whether the autocomplete panel should be visible, depending on option length. */\r\n    showPanel: boolean;\r\n    /** Whether the autocomplete panel is open. */\r\n    get isOpen(): boolean;\r\n    _isOpen: boolean;\r\n    /** @docs-private */\r\n    template: TemplateRef<any>;\r\n    /** Element for the panel containing the autocomplete options. */\r\n    panel: ElementRef;\r\n    /** @docs-private */\r\n    options: QueryList<MatOption>;\r\n    /** @docs-private */\r\n    optionGroups: QueryList<MatOptgroup>;\r\n    /** Function that maps an option's control value to its display value in the trigger. */\r\n    displayWith: ((value: any) => string) | null;\r\n    /**\r\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n     */\r\n    get autoActiveFirstOption(): boolean;\r\n    set autoActiveFirstOption(value: boolean);\r\n    private _autoActiveFirstOption;\r\n    /**\r\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\r\n     * match the width of its host.\r\n     */\r\n    panelWidth: string | number;\r\n    /** Event that is emitted whenever an option from the list is selected. */\r\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\r\n    /** Event that is emitted when the autocomplete panel is opened. */\r\n    readonly opened: EventEmitter<void>;\r\n    /** Event that is emitted when the autocomplete panel is closed. */\r\n    readonly closed: EventEmitter<void>;\r\n    /** Emits whenever an option is activated using the keyboard. */\r\n    readonly optionActivated: EventEmitter<MatAutocompleteActivatedEvent>;\r\n    /**\r\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n     * inside the overlay container to allow for easy styling.\r\n     */\r\n    set classList(value: string);\r\n    _classList: {\r\n        [key: string]: boolean;\r\n    };\r\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n    id: string;\r\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, defaults: MatAutocompleteDefaultOptions);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n     * above or below the fold, as they are not actually being focused when active.\r\n     */\r\n    _setScrollTop(scrollTop: number): void;\r\n    /** Returns the panel's scrollTop. */\r\n    _getScrollTop(): number;\r\n    /** Panel should hide itself when the option list is empty. */\r\n    _setVisibility(): void;\r\n    /** Emits the `select` event. */\r\n    _emitSelectEvent(option: MatOption): void;\r\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\r\n    private _setVisibilityClasses;\r\n    static ngAcceptInputType_autoActiveFirstOption: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\nexport {};\r\n"]}