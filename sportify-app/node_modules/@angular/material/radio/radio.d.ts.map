{"version":3,"file":"radio.d.ts","sources":["radio.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, OnInit, QueryList } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, ThemePalette } from '@angular/material/core';\r\nexport interface MatRadioDefaultOptions {\r\n    color: ThemePalette;\r\n}\r\nexport declare const MAT_RADIO_DEFAULT_OPTIONS: InjectionToken<MatRadioDefaultOptions>;\r\nexport declare function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions;\r\n/**\r\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * @docs-private\r\n */\r\nexport declare const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\r\n/** Change event object emitted by MatRadio and MatRadioGroup. */\r\nexport declare class MatRadioChange {\r\n    /** The MatRadioButton that emits the change event. */\r\n    source: _MatRadioButtonBase;\r\n    /** The value of the MatRadioButton. */\r\n    value: any;\r\n    constructor(\r\n    /** The MatRadioButton that emits the change event. */\r\n    source: _MatRadioButtonBase, \r\n    /** The value of the MatRadioButton. */\r\n    value: any);\r\n}\r\n/**\r\n * Base class with all of the `MatRadioGroup` functionality.\r\n * @docs-private\r\n */\r\nexport declare abstract class _MatRadioGroupBase<T extends _MatRadioButtonBase> implements AfterContentInit, ControlValueAccessor {\r\n    private _changeDetector;\r\n    /** Selected value for the radio group. */\r\n    private _value;\r\n    /** The HTML name attribute applied to radio buttons in this group. */\r\n    private _name;\r\n    /** The currently selected radio button. Should match value. */\r\n    private _selected;\r\n    /** Whether the `value` has been set to its initial value. */\r\n    private _isInitialized;\r\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n    private _labelPosition;\r\n    /** Whether the radio group is disabled. */\r\n    private _disabled;\r\n    /** Whether the radio group is required. */\r\n    private _required;\r\n    /** The method to be called in order to update ngModel */\r\n    _controlValueAccessorChangeFn: (value: any) => void;\r\n    /**\r\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n     * @docs-private\r\n     */\r\n    onTouched: () => any;\r\n    /**\r\n     * Event emitted when the group value changes.\r\n     * Change events are only emitted when the value changes due to user interaction with\r\n     * a radio button (the same behavior as `<input type-\"radio\">`).\r\n     */\r\n    readonly change: EventEmitter<MatRadioChange>;\r\n    /** Child radio buttons. */\r\n    abstract _radios: QueryList<T>;\r\n    /** Theme color for all of the radio buttons in the group. */\r\n    color: ThemePalette;\r\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\r\n    get name(): string;\r\n    set name(value: string);\r\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n    get labelPosition(): 'before' | 'after';\r\n    set labelPosition(v: 'before' | 'after');\r\n    /**\r\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\r\n     * a corresponding radio button with a matching value. If there is not such a corresponding\r\n     * radio button, this value persists to be applied in case a new radio button is added with a\r\n     * matching value.\r\n     */\r\n    get value(): any;\r\n    set value(newValue: any);\r\n    _checkSelectedRadioButton(): void;\r\n    /**\r\n     * The currently selected radio button. If set to a new radio button, the radio group value\r\n     * will be updated to match the new selected button.\r\n     */\r\n    get selected(): T | null;\r\n    set selected(selected: T | null);\r\n    /** Whether the radio group is disabled */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    /** Whether the radio group is required */\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    constructor(_changeDetector: ChangeDetectorRef);\r\n    /**\r\n     * Initialize properties once content children are available.\r\n     * This allows us to propagate relevant attributes to associated buttons.\r\n     */\r\n    ngAfterContentInit(): void;\r\n    /**\r\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n     * radio buttons upon their blur.\r\n     */\r\n    _touch(): void;\r\n    private _updateRadioButtonNames;\r\n    /** Updates the `selected` radio button from the internal _value state. */\r\n    private _updateSelectedRadioFromValue;\r\n    /** Dispatch change event with current selection and group value. */\r\n    _emitChangeEvent(): void;\r\n    _markRadiosForCheck(): void;\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param value\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * Registers a callback to be triggered when the model value changes.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param fn Callback to be registered.\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    /**\r\n     * Registers a callback to be triggered when the control is touched.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param fn Callback to be registered.\r\n     */\r\n    registerOnTouched(fn: any): void;\r\n    /**\r\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n     * @param isDisabled Whether the control should be disabled.\r\n     */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_required: BooleanInput;\r\n}\r\n/**\r\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\r\n */\r\nexport declare class MatRadioGroup extends _MatRadioGroupBase<MatRadioButton> {\r\n    _radios: QueryList<MatRadioButton>;\r\n}\r\n/** @docs-private */\r\ndeclare class MatRadioButtonBase {\r\n    _elementRef: ElementRef;\r\n    disabled: boolean;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatRadioButtonMixinBase: CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase;\r\n/**\r\n * Base class with all of the `MatRadioButton` functionality.\r\n * @docs-private\r\n */\r\nexport declare abstract class _MatRadioButtonBase extends _MatRadioButtonMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\r\n    protected _changeDetector: ChangeDetectorRef;\r\n    private _focusMonitor;\r\n    private _radioDispatcher;\r\n    _animationMode?: string | undefined;\r\n    private _providerOverride?;\r\n    private _uniqueId;\r\n    /** The unique ID for the radio button. */\r\n    id: string;\r\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\r\n    name: string;\r\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\r\n    ariaLabel: string;\r\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\r\n    ariaLabelledby: string;\r\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\r\n    ariaDescribedby: string;\r\n    /** Whether this radio button is checked. */\r\n    get checked(): boolean;\r\n    set checked(value: boolean);\r\n    /** The value of this radio button. */\r\n    get value(): any;\r\n    set value(value: any);\r\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\r\n    get labelPosition(): 'before' | 'after';\r\n    set labelPosition(value: 'before' | 'after');\r\n    private _labelPosition;\r\n    /** Whether the radio button is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    /** Whether the radio button is required. */\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    /** Theme color of the radio button. */\r\n    get color(): ThemePalette;\r\n    set color(newValue: ThemePalette);\r\n    private _color;\r\n    /**\r\n     * Event emitted when the checked state of this radio button changes.\r\n     * Change events are only emitted when the value changes due to user interaction with\r\n     * the radio button (the same behavior as `<input type-\"radio\">`).\r\n     */\r\n    readonly change: EventEmitter<MatRadioChange>;\r\n    /** The parent radio group. May or may not be present. */\r\n    radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>;\r\n    /** ID of the native input element inside `<mat-radio-button>` */\r\n    get inputId(): string;\r\n    /** Whether this radio is checked. */\r\n    private _checked;\r\n    /** Whether this radio is disabled. */\r\n    private _disabled;\r\n    /** Whether this radio is required. */\r\n    private _required;\r\n    /** Value assigned to this radio. */\r\n    private _value;\r\n    /** Unregister function for _radioDispatcher */\r\n    private _removeUniqueSelectionListener;\r\n    /** The native `<input type=radio>` element */\r\n    _inputElement: ElementRef<HTMLInputElement>;\r\n    constructor(radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>, elementRef: ElementRef, _changeDetector: ChangeDetectorRef, _focusMonitor: FocusMonitor, _radioDispatcher: UniqueSelectionDispatcher, _animationMode?: string | undefined, _providerOverride?: MatRadioDefaultOptions | undefined);\r\n    /** Focuses the radio button. */\r\n    focus(options?: FocusOptions): void;\r\n    /**\r\n     * Marks the radio button as needing checking for change detection.\r\n     * This method is exposed because the parent radio group will directly\r\n     * update bound properties of the radio button.\r\n     */\r\n    _markForCheck(): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Dispatch change event with current value. */\r\n    private _emitChangeEvent;\r\n    _isRippleDisabled(): boolean;\r\n    _onInputClick(event: Event): void;\r\n    /**\r\n     * Triggered when the radio button received a click or the input recognized any change.\r\n     * Clicking on a label element, will trigger a change event on the associated input.\r\n     */\r\n    _onInputChange(event: Event): void;\r\n    /** Sets the disabled state and marks for check if a change occurred. */\r\n    protected _setDisabled(value: boolean): void;\r\n    static ngAcceptInputType_checked: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_required: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\n/**\r\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\r\n */\r\nexport declare class MatRadioButton extends _MatRadioButtonBase {\r\n    constructor(radioGroup: MatRadioGroup, elementRef: ElementRef, changeDetector: ChangeDetectorRef, focusMonitor: FocusMonitor, radioDispatcher: UniqueSelectionDispatcher, animationMode?: string, providerOverride?: MatRadioDefaultOptions);\r\n}\r\nexport {};\r\n"]}