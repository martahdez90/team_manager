{"version":3,"file":"slide-toggle.d.ts","sources":["slide-toggle.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\r\nimport { MatSlideToggleDefaultOptions } from './slide-toggle-config';\r\n/** @docs-private */\r\nexport declare const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any;\r\n/** Change event object emitted by a MatSlideToggle. */\r\nexport declare class MatSlideToggleChange {\r\n    /** The source MatSlideToggle of the event. */\r\n    source: MatSlideToggle;\r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    checked: boolean;\r\n    constructor(\r\n    /** The source MatSlideToggle of the event. */\r\n    source: MatSlideToggle, \r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    checked: boolean);\r\n}\r\n/** @docs-private */\r\ndeclare class MatSlideToggleBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatSlideToggleMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatSlideToggleBase;\r\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\r\nexport declare class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\r\n    private _focusMonitor;\r\n    private _changeDetectorRef;\r\n    defaults: MatSlideToggleDefaultOptions;\r\n    _animationMode?: string | undefined;\r\n    private _onChange;\r\n    private _onTouched;\r\n    private _uniqueId;\r\n    private _required;\r\n    private _checked;\r\n    /** Reference to the thumb HTMLElement. */\r\n    _thumbEl: ElementRef;\r\n    /** Reference to the thumb bar HTMLElement. */\r\n    _thumbBarEl: ElementRef;\r\n    /** Name value will be applied to the input element if present. */\r\n    name: string | null;\r\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n    id: string;\r\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\r\n    labelPosition: 'before' | 'after';\r\n    /** Used to set the aria-label attribute on the underlying input element. */\r\n    ariaLabel: string | null;\r\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n    ariaLabelledby: string | null;\r\n    /** Whether the slide-toggle is required. */\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    /** Whether the slide-toggle element is checked or not. */\r\n    get checked(): boolean;\r\n    set checked(value: boolean);\r\n    /** An event will be dispatched each time the slide-toggle changes its value. */\r\n    readonly change: EventEmitter<MatSlideToggleChange>;\r\n    /**\r\n     * An event will be dispatched each time the slide-toggle input is toggled.\r\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\r\n     * the slide toggle's value has changed.\r\n     */\r\n    readonly toggleChange: EventEmitter<void>;\r\n    /** Returns the unique id for the visual hidden input. */\r\n    get inputId(): string;\r\n    /** Reference to the underlying input element. */\r\n    _inputElement: ElementRef<HTMLInputElement>;\r\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, tabIndex: string, defaults: MatSlideToggleDefaultOptions, _animationMode?: string | undefined);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Method being called whenever the underlying input emits a change event. */\r\n    _onChangeEvent(event: Event): void;\r\n    /** Method being called whenever the slide-toggle has been clicked. */\r\n    _onInputClick(event: Event): void;\r\n    /** Implemented as part of ControlValueAccessor. */\r\n    writeValue(value: any): void;\r\n    /** Implemented as part of ControlValueAccessor. */\r\n    registerOnChange(fn: any): void;\r\n    /** Implemented as part of ControlValueAccessor. */\r\n    registerOnTouched(fn: any): void;\r\n    /** Implemented as a part of ControlValueAccessor. */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /** Focuses the slide-toggle. */\r\n    focus(options?: FocusOptions): void;\r\n    /** Toggles the checked state of the slide-toggle. */\r\n    toggle(): void;\r\n    /**\r\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n     */\r\n    private _emitChangeEvent;\r\n    /** Method being called whenever the label text changes. */\r\n    _onLabelTextChange(): void;\r\n    static ngAcceptInputType_required: BooleanInput;\r\n    static ngAcceptInputType_checked: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\nexport {};\r\n"]}