{"version":3,"file":"chip-input.d.ts","sources":["chip-input.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, EventEmitter, OnChanges } from '@angular/core';\r\nimport { MatChipsDefaultOptions } from './chip-default-options';\r\nimport { MatChipList } from './chip-list';\r\nimport { MatChipTextControl } from './chip-text-control';\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n    /** The native `<input>` element that the event is being fired for. */\r\n    input: HTMLInputElement;\r\n    /** The value of the input. */\r\n    value: string;\r\n}\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\nexport declare class MatChipInput implements MatChipTextControl, OnChanges {\r\n    protected _elementRef: ElementRef<HTMLInputElement>;\r\n    private _defaultOptions;\r\n    /** Whether the control is focused. */\r\n    focused: boolean;\r\n    _chipList: MatChipList;\r\n    /** Register input for chip list */\r\n    set chipList(value: MatChipList);\r\n    /**\r\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n     */\r\n    get addOnBlur(): boolean;\r\n    set addOnBlur(value: boolean);\r\n    _addOnBlur: boolean;\r\n    /**\r\n     * The list of key codes that will trigger a chipEnd event.\r\n     *\r\n     * Defaults to `[ENTER]`.\r\n     */\r\n    separatorKeyCodes: number[] | Set<number>;\r\n    /** Emitted when a chip is to be added. */\r\n    chipEnd: EventEmitter<MatChipInputEvent>;\r\n    /** The input's placeholder text. */\r\n    placeholder: string;\r\n    /** Unique id for the input. */\r\n    id: string;\r\n    /** Whether the input is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Whether the input is empty. */\r\n    get empty(): boolean;\r\n    /** The native input element to which this directive is attached. */\r\n    protected _inputElement: HTMLInputElement;\r\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _defaultOptions: MatChipsDefaultOptions);\r\n    ngOnChanges(): void;\r\n    /** Utility method to make host definition/tests more clear. */\r\n    _keydown(event?: KeyboardEvent): void;\r\n    /** Checks to see if the blur should emit the (chipEnd) event. */\r\n    _blur(): void;\r\n    _focus(): void;\r\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n    _emitChipEnd(event?: KeyboardEvent): void;\r\n    _onInput(): void;\r\n    /** Focuses the input. */\r\n    focus(options?: FocusOptions): void;\r\n    /** Checks whether a keycode is one of the configured separators. */\r\n    private _isSeparatorKey;\r\n    static ngAcceptInputType_addOnBlur: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n"]}