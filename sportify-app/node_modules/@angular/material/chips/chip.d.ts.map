{"version":3,"file":"chip.d.ts","sources":["chip.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusableOption } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ElementRef, EventEmitter, NgZone, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { CanColor, CanColorCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, RippleConfig, RippleGlobalOptions, RippleTarget } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n    /** The chip the event was fired on. */\r\n    chip: MatChip;\r\n}\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport declare class MatChipSelectionChange {\r\n    /** Reference to the chip that emitted the event. */\r\n    source: MatChip;\r\n    /** Whether the chip that emitted the event is selected. */\r\n    selected: boolean;\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    isUserInput: boolean;\r\n    constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    source: MatChip, \r\n    /** Whether the chip that emitted the event is selected. */\r\n    selected: boolean, \r\n    /** Whether the selection change was a result of a user interaction. */\r\n    isUserInput?: boolean);\r\n}\r\n/** @docs-private */\r\ndeclare class MatChipBase {\r\n    _elementRef: ElementRef;\r\n    disabled: boolean;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatChipBase;\r\n/**\r\n * Dummy directive to add CSS class to chip avatar.\r\n * @docs-private\r\n */\r\nexport declare class MatChipAvatar {\r\n}\r\n/**\r\n * Dummy directive to add CSS class to chip trailing icon.\r\n * @docs-private\r\n */\r\nexport declare class MatChipTrailingIcon {\r\n}\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\nexport declare class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor, CanDisableRipple, RippleTarget, HasTabIndex {\r\n    _elementRef: ElementRef<HTMLElement>;\r\n    private _ngZone;\r\n    private _changeDetectorRef?;\r\n    /** Reference to the RippleRenderer for the chip. */\r\n    private _chipRipple;\r\n    /**\r\n     * Reference to the element that acts as the chip's ripple target. This element is\r\n     * dynamically added as a child node of the chip. The chip itself cannot be used as the\r\n     * ripple target because it must be the host of the focus indicator.\r\n     */\r\n    private _chipRippleTarget;\r\n    /**\r\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\r\n     * is set to the global ripple options since we don't have any configurable options for\r\n     * the chip ripples.\r\n     * @docs-private\r\n     */\r\n    rippleConfig: RippleConfig & RippleGlobalOptions;\r\n    /**\r\n     * Whether ripples are disabled on interaction\r\n     * @docs-private\r\n     */\r\n    get rippleDisabled(): boolean;\r\n    /** Whether the chip has focus. */\r\n    _hasFocus: boolean;\r\n    /** Whether animations for the chip are enabled. */\r\n    _animationsDisabled: boolean;\r\n    /** Whether the chip list is selectable */\r\n    chipListSelectable: boolean;\r\n    /** Whether the chip list is in multi-selection mode. */\r\n    _chipListMultiple: boolean;\r\n    /** Whether the chip list as a whole is disabled. */\r\n    _chipListDisabled: boolean;\r\n    /** The chip avatar */\r\n    avatar: MatChipAvatar;\r\n    /** The chip's trailing icon. */\r\n    trailingIcon: MatChipTrailingIcon;\r\n    /** The chip's remove toggler. */\r\n    removeIcon: MatChipRemove;\r\n    /** Whether the chip is selected. */\r\n    get selected(): boolean;\r\n    set selected(value: boolean);\r\n    protected _selected: boolean;\r\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n    get value(): any;\r\n    set value(value: any);\r\n    protected _value: any;\r\n    /**\r\n     * Whether or not the chip is selectable. When a chip is not selectable,\r\n     * changes to its selected state are always ignored. By default a chip is\r\n     * selectable, and it becomes non-selectable if its parent chip list is\r\n     * not selectable.\r\n     */\r\n    get selectable(): boolean;\r\n    set selectable(value: boolean);\r\n    protected _selectable: boolean;\r\n    /** Whether the chip is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    protected _disabled: boolean;\r\n    /**\r\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n     */\r\n    get removable(): boolean;\r\n    set removable(value: boolean);\r\n    protected _removable: boolean;\r\n    /** Emits when the chip is focused. */\r\n    readonly _onFocus: Subject<MatChipEvent>;\r\n    /** Emits when the chip is blured. */\r\n    readonly _onBlur: Subject<MatChipEvent>;\r\n    /** Emitted when the chip is selected or deselected. */\r\n    readonly selectionChange: EventEmitter<MatChipSelectionChange>;\r\n    /** Emitted when the chip is destroyed. */\r\n    readonly destroyed: EventEmitter<MatChipEvent>;\r\n    /** Emitted when a chip is to be removed. */\r\n    readonly removed: EventEmitter<MatChipEvent>;\r\n    /** The ARIA selected applied to the chip. */\r\n    get ariaSelected(): string | null;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, platform: Platform, globalRippleOptions: RippleGlobalOptions | null, animationMode?: string, _changeDetectorRef?: ChangeDetectorRef | undefined, tabIndex?: string, _document?: any);\r\n    _addHostClassName(): void;\r\n    ngOnDestroy(): void;\r\n    /** Selects the chip. */\r\n    select(): void;\r\n    /** Deselects the chip. */\r\n    deselect(): void;\r\n    /** Select this chip and emit selected event */\r\n    selectViaInteraction(): void;\r\n    /** Toggles the current selected state of this chip. */\r\n    toggleSelected(isUserInput?: boolean): boolean;\r\n    /** Allows for programmatic focusing of the chip. */\r\n    focus(): void;\r\n    /**\r\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n     * BACKSPACE keys are pressed.\r\n     *\r\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n     */\r\n    remove(): void;\r\n    /** Handles click events on the chip. */\r\n    _handleClick(event: Event): void;\r\n    /** Handle custom key presses. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    _blur(): void;\r\n    private _dispatchSelectionChange;\r\n    private _markForCheck;\r\n    static ngAcceptInputType_selected: BooleanInput;\r\n    static ngAcceptInputType_selectable: BooleanInput;\r\n    static ngAcceptInputType_removable: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\nexport declare class MatChipRemove {\r\n    protected _parentChip: MatChip;\r\n    constructor(_parentChip: MatChip, elementRef?: ElementRef<HTMLElement>);\r\n    /** Calls the parent chip's public `remove()` method if applicable. */\r\n    _handleClick(event: Event): void;\r\n}\r\nexport {};\r\n"]}