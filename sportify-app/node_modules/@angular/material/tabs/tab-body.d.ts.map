{"version":3,"file":"tab-body.d.ts","sources":["tab-body.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, ElementRef, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@angular/cdk/portal';\r\nimport { Directionality, Direction } from '@angular/cdk/bidi';\r\nimport { Subject } from 'rxjs';\r\n/**\r\n * These position states are used internally as animation states for the tab body. Setting the\r\n * position state to left, right, or center will transition the tab body from its current\r\n * position to its respective state. If there is not current position (void, in the case of a new\r\n * tab body), then there will be no transition animation to its state.\r\n *\r\n * In the case of a new tab body that should immediately be centered with an animating transition,\r\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\r\n * psuedo-prior state.\r\n */\r\nexport declare type MatTabBodyPositionState = 'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\r\n/**\r\n * The origin state is an internally used state that is set on a new tab body indicating if it\r\n * began to the left or right of the prior selected index. For example, if the selected index was\r\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\r\n * origin of right because its index was greater than the prior selected index.\r\n */\r\nexport declare type MatTabBodyOriginState = 'left' | 'right';\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * @docs-private\r\n */\r\nexport declare class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\r\n    private _host;\r\n    /** Subscription to events for when the tab body begins centering. */\r\n    private _centeringSub;\r\n    /** Subscription to events for when the tab body finishes leaving from center position. */\r\n    private _leavingSub;\r\n    constructor(componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, _host: MatTabBody, \r\n    /**\r\n     * @deprecated `_document` parameter to be made required.\r\n     * @breaking-change 9.0.0\r\n     */\r\n    _document?: any);\r\n    /** Set initial visibility or set up subscription for changing visibility. */\r\n    ngOnInit(): void;\r\n    /** Clean up centering subscription. */\r\n    ngOnDestroy(): void;\r\n}\r\n/**\r\n * Base class with all of the `MatTabBody` functionality.\r\n * @docs-private\r\n */\r\nexport declare abstract class _MatTabBodyBase implements OnInit, OnDestroy {\r\n    private _elementRef;\r\n    private _dir;\r\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\r\n    private _positionIndex;\r\n    /** Subscription to the directionality change observable. */\r\n    private _dirChangeSubscription;\r\n    /** Tab body position state. Used by the animation trigger for the current state. */\r\n    _position: MatTabBodyPositionState;\r\n    /** Emits when an animation on the tab is complete. */\r\n    _translateTabComplete: Subject<AnimationEvent>;\r\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\r\n    readonly _onCentering: EventEmitter<number>;\r\n    /** Event emitted before the centering of the tab begins. */\r\n    readonly _beforeCentering: EventEmitter<boolean>;\r\n    /** Event emitted before the centering of the tab begins. */\r\n    readonly _afterLeavingCenter: EventEmitter<void>;\r\n    /** Event emitted when the tab completes its animation towards the center. */\r\n    readonly _onCentered: EventEmitter<void>;\r\n    /** The portal host inside of this container into which the tab body content will be loaded. */\r\n    abstract _portalHost: PortalHostDirective;\r\n    /** The tab body content to display. */\r\n    _content: TemplatePortal;\r\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\r\n    origin: number | null;\r\n    /** Duration for the tab's animation. */\r\n    animationDuration: string;\r\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\r\n    set position(position: number);\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _dir: Directionality, changeDetectorRef: ChangeDetectorRef);\r\n    /**\r\n     * After initialized, check if the content is centered and has an origin. If so, set the\r\n     * special position states that transition the tab from the left or right before centering.\r\n     */\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    _onTranslateTabStarted(event: AnimationEvent): void;\r\n    /** The text direction of the containing app. */\r\n    _getLayoutDirection(): Direction;\r\n    /** Whether the provided position state is considered center, regardless of origin. */\r\n    _isCenterPosition(position: MatTabBodyPositionState | string): boolean;\r\n    /** Computes the position state that will be used for the tab-body animation trigger. */\r\n    private _computePositionAnimationState;\r\n    /**\r\n     * Computes the position state based on the specified origin position. This is used if the\r\n     * tab is becoming visible immediately after creation.\r\n     */\r\n    private _computePositionFromOrigin;\r\n}\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * @docs-private\r\n */\r\nexport declare class MatTabBody extends _MatTabBodyBase {\r\n    _portalHost: PortalHostDirective;\r\n    constructor(elementRef: ElementRef<HTMLElement>, dir: Directionality, changeDetectorRef: ChangeDetectorRef);\r\n}\r\n"]}