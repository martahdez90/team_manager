{"version":3,"file":"tab-group.d.ts","sources":["tab-group.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput, NumberInput } from '@angular/cdk/coercion';\r\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';\r\nimport { CanColor, CanColorCtor, CanDisableRipple, CanDisableRippleCtor, ThemePalette } from '@angular/material/core';\r\nimport { MatTab } from './tab';\r\nimport { MatTabsConfig } from './tab-config';\r\n/** A simple change event emitted on focus or selection changes. */\r\nexport declare class MatTabChangeEvent {\r\n    /** Index of the currently-selected tab. */\r\n    index: number;\r\n    /** Reference to the currently-selected tab. */\r\n    tab: MatTab;\r\n}\r\n/** Possible positions for the tab header. */\r\nexport declare type MatTabHeaderPosition = 'above' | 'below';\r\n/** @docs-private */\r\ndeclare class MatTabGroupMixinBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupMixinBase;\r\ninterface MatTabGroupBaseHeader {\r\n    _alignInkBarToSelectedTab: () => void;\r\n    focusIndex: number;\r\n}\r\n/**\r\n * Base class with all of the `MatTabGroupBase` functionality.\r\n * @docs-private\r\n */\r\nexport declare abstract class _MatTabGroupBase extends _MatTabGroupMixinBase implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\r\n    protected _changeDetectorRef: ChangeDetectorRef;\r\n    _animationMode?: string | undefined;\r\n    /**\r\n     * All tabs inside the tab group. This includes tabs that belong to groups that are nested\r\n     * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\r\n     */\r\n    abstract _allTabs: QueryList<MatTab>;\r\n    abstract _tabBodyWrapper: ElementRef;\r\n    abstract _tabHeader: MatTabGroupBaseHeader;\r\n    /** All of the tabs that belong to the group. */\r\n    _tabs: QueryList<MatTab>;\r\n    /** The tab index that should be selected after the content has been checked. */\r\n    private _indexToSelect;\r\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\r\n    private _tabBodyWrapperHeight;\r\n    /** Subscription to tabs being added/removed. */\r\n    private _tabsSubscription;\r\n    /** Subscription to changes in the tab labels. */\r\n    private _tabLabelSubscription;\r\n    /** Whether the tab group should grow to the size of the active tab. */\r\n    get dynamicHeight(): boolean;\r\n    set dynamicHeight(value: boolean);\r\n    private _dynamicHeight;\r\n    /** The index of the active tab. */\r\n    get selectedIndex(): number | null;\r\n    set selectedIndex(value: number | null);\r\n    private _selectedIndex;\r\n    /** Position of the tab header. */\r\n    headerPosition: MatTabHeaderPosition;\r\n    /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\r\n    get animationDuration(): string;\r\n    set animationDuration(value: string);\r\n    private _animationDuration;\r\n    /**\r\n     * Whether pagination should be disabled. This can be used to avoid unnecessary\r\n     * layout recalculations if it's known that pagination won't be required.\r\n     */\r\n    disablePagination: boolean;\r\n    /** Background color of the tab group. */\r\n    get backgroundColor(): ThemePalette;\r\n    set backgroundColor(value: ThemePalette);\r\n    private _backgroundColor;\r\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\r\n    readonly selectedIndexChange: EventEmitter<number>;\r\n    /** Event emitted when focus has changed within a tab group. */\r\n    readonly focusChange: EventEmitter<MatTabChangeEvent>;\r\n    /** Event emitted when the body animation has completed */\r\n    readonly animationDone: EventEmitter<void>;\r\n    /** Event emitted when the tab selection has changed. */\r\n    readonly selectedTabChange: EventEmitter<MatTabChangeEvent>;\r\n    private _groupId;\r\n    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, defaultConfig?: MatTabsConfig, _animationMode?: string | undefined);\r\n    /**\r\n     * After the content is checked, this component knows what tabs have been defined\r\n     * and what the selected index should be. This is where we can know exactly what position\r\n     * each tab should be in according to the new selected index, and additionally we know how\r\n     * a new selected tab should transition in (from the left or right).\r\n     */\r\n    ngAfterContentChecked(): void;\r\n    ngAfterContentInit(): void;\r\n    /** Listens to changes in all of the tabs. */\r\n    private _subscribeToAllTabChanges;\r\n    ngOnDestroy(): void;\r\n    /** Re-aligns the ink bar to the selected tab element. */\r\n    realignInkBar(): void;\r\n    _focusChanged(index: number): void;\r\n    private _createChangeEvent;\r\n    /**\r\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\r\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n     * manually.\r\n     */\r\n    private _subscribeToTabLabels;\r\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\r\n    private _clampTabIndex;\r\n    /** Returns a unique id for each tab label element */\r\n    _getTabLabelId(i: number): string;\r\n    /** Returns a unique id for each tab content element */\r\n    _getTabContentId(i: number): string;\r\n    /**\r\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n     * height property is true.\r\n     */\r\n    _setTabBodyWrapperHeight(tabHeight: number): void;\r\n    /** Removes the height of the tab body wrapper. */\r\n    _removeTabBodyWrapperHeight(): void;\r\n    /** Handle click events, setting new selected index if appropriate. */\r\n    _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number): void;\r\n    /** Retrieves the tabindex for the tab. */\r\n    _getTabIndex(tab: MatTab, idx: number): number | null;\r\n    static ngAcceptInputType_dynamicHeight: BooleanInput;\r\n    static ngAcceptInputType_animationDuration: NumberInput;\r\n    static ngAcceptInputType_selectedIndex: NumberInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\n/**\r\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\r\n * animated ink-bar, keyboard navigation, and screen reader.\r\n * See: https://material.io/design/components/tabs.html\r\n */\r\nexport declare class MatTabGroup extends _MatTabGroupBase {\r\n    _allTabs: QueryList<MatTab>;\r\n    _tabBodyWrapper: ElementRef;\r\n    _tabHeader: MatTabGroupBaseHeader;\r\n    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, defaultConfig?: MatTabsConfig, animationMode?: string);\r\n}\r\nexport {};\r\n"]}