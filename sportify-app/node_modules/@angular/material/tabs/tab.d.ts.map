{"version":3,"file":"tab.d.ts","sources":["tab.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef, InjectionToken } from '@angular/core';\r\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatTabLabel } from './tab-label';\r\n/** @docs-private */\r\ndeclare class MatTabBase {\r\n}\r\ndeclare const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase;\r\n/**\r\n * Used to provide a tab group to a tab without causing a circular dependency.\r\n * @docs-private\r\n */\r\nexport declare const MAT_TAB_GROUP: InjectionToken<any>;\r\nexport declare class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\r\n    private _viewContainerRef;\r\n    /**\r\n     * @deprecated `_closestTabGroup` parameter to become required.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    _closestTabGroup?: any;\r\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\r\n    get templateLabel(): MatTabLabel;\r\n    set templateLabel(value: MatTabLabel);\r\n    private _templateLabel;\r\n    /**\r\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\r\n     */\r\n    _explicitContent: TemplateRef<any>;\r\n    /** Template inside the MatTab view that contains an `<ng-content>`. */\r\n    _implicitContent: TemplateRef<any>;\r\n    /** Plain text label for the tab, used when there is no template label. */\r\n    textLabel: string;\r\n    /** Aria label for the tab. */\r\n    ariaLabel: string;\r\n    /**\r\n     * Reference to the element that the tab is labelled by.\r\n     * Will be cleared if `aria-label` is set at the same time.\r\n     */\r\n    ariaLabelledby: string;\r\n    /** Portal that will be the hosted content of the tab */\r\n    private _contentPortal;\r\n    /** @docs-private */\r\n    get content(): TemplatePortal | null;\r\n    /** Emits whenever the internal state of the tab changes. */\r\n    readonly _stateChanges: Subject<void>;\r\n    /**\r\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\r\n     * represents the right.\r\n     */\r\n    position: number | null;\r\n    /**\r\n     * The initial relatively index origin of the tab if it was created and selected after there\r\n     * was already a selected tab. Provides context of what position the tab should originate from.\r\n     */\r\n    origin: number | null;\r\n    /**\r\n     * Whether the tab is currently active.\r\n     */\r\n    isActive: boolean;\r\n    constructor(_viewContainerRef: ViewContainerRef, \r\n    /**\r\n     * @deprecated `_closestTabGroup` parameter to become required.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    _closestTabGroup?: any);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    ngOnInit(): void;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\nexport {};\r\n"]}